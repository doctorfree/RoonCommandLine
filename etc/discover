#!/bin/bash
#
# Discover script for rooncommandline
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>

ROON=/usr/local/Roon
ROONETC=${ROON}/etc
ROON_INI=${ROONETC}/roon_api.ini
ROONCONF=${ROONETC}/pyroonconf
SUDO="$1"
SARG="$2"
SUSR="$3"

export PATH=$PATH:/usr/local/bin
if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
else
  if [ -x /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    [ -x /usr/local/bin/brew ] && eval "$(/usr/local/bin/brew shellenv)"
  fi
fi

echo "In order to configure the Python Roon API we must set the IP address"
echo "of the Roon Core. Discovery will be used to determine the Roon Core IP."
echo "When prompted for authorization, go to a Roon Remote window and click"
echo "    Settings -> Extensions -> Enable"
echo "to authorize discovery"
echo ""

EX_CORE_IP=$(cat ${ROON_INI} | grep RoonCoreIP | awk -F '=' ' { print $2 } ')
EX_CORE_IP="$(echo -e "${EX_CORE_IP}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
EX_CORE_PORT=$(cat ${ROON_INI} | grep RoonCorePort | awk -F '=' ' { print $2 } ')
EX_CORE_PORT="$(echo -e "${EX_CORE_PORT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

# Get and set the Roon Core IP address
${SUDO} ${SARG} ${SUSR} ${ROON}/bin/get_core_ip 2>&1 | tee /tmp/discover$$

echo "Approval granted, retrieving zones and zone info ..."
sleep 5
CORE_IP=$(cat /tmp/discover$$ | grep RoonCoreIP | awk -F '=' ' { print $2 } ')
CORE_IP="$(echo -e "${CORE_IP}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
CORE_PORT=$(cat /tmp/discover$$ | grep RoonCorePort | awk -F '=' ' { print $2 } ')
CORE_PORT="$(echo -e "${CORE_PORT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
cat ${ROON_INI} | sed -e "s/${EX_CORE_IP}/${CORE_IP}/" -e "s/${EX_CORE_PORT}/${CORE_PORT}/" >/tmp/core$$
[ -s /tmp/core$$ ] && cp /tmp/core$$ ${ROON_INI}
rm -f /tmp/core$$ /tmp/discover$$ /tmp/roonapi.log
touch ${ROONETC}/.initialized
[ -f ${ROONETC}/.initialized ] || sudo touch ${ROONETC}/.initialized

# Get and set the default zone and initial zone groupings
# Attempting to avoid grouping incompatible zones is somewhat convoluted
defaultZone=
groupOne=
groupTwo=
groupRee=
groupFor=
zones=$(${SUDO} ${SARG} ${SUSR} ${ROON}/bin/get_zones)
numZones=$(echo "${zones}" | awk -F ',' ' { print NF } ')
numWith=0
[ ${numZones} -gt 0 ] && {
  defaultZone=$(echo "${zones}" | awk -F ',' ' { print $1 } ')
  withDefaultZone=$(${SUDO} ${SARG} ${SUSR} ${ROON}/bin/get_zone_info -l -z "${defaultZone}")
  numWith=$(echo "${withDefaultZone}" | awk -F ',' ' { print NF } ')
}
[ ${numZones} -gt 2 ] && {
  [ ${numWith} -gt 0 ] && {
    groupOne=$(echo "${defaultZone},${withDefaultZone}" | sed -e "s/,/, /g" -e "s/:/,/")
    # Find a zone not in groupOne and use it for the second zone group
    zoneTwo=
    numWithTwo=0
    zonearray=()
    arrayone=()
    unset saved_IFS
    [ -n "${IFS+set}" ] && saved_IFS=$IFS
    IFS=","
    for i in ${zones}; do
      thiszone="$(echo -e "$i" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      zonearray+=("${thiszone}")
    done
    for i in ${groupOne}; do
      thisgroup="$(echo -e "$i" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      arrayone+=("${thisgroup}")
    done

    Array3=()
    for zone in ${zonearray[@]}; do
      for one in ${arrayone[@]}; do
        [ "${zone}" == "${one}" ] && continue 2
      done
      Array3+=("${zone}")
    done

    zoneTwo=${Array3[0]}
    [ "${zoneTwo}" ] || zoneTwo=${arrayone[1]}
    withZoneTwo=$(${SUDO} ${SARG} ${SUSR} ${ROON}/bin/get_zone_info -l -z "${zoneTwo}")
    numWithTwo=$(echo "${withZoneTwo}" | awk -F ',' ' { print NF } ')
    [ "${numWithTwo}" ] && {
      [ -z "${numWithTwo//[0-9]}" ] && {
        [ ${numWithTwo} -gt 0 ] && {
          groupTwo=$(echo "${zoneTwo},${withZoneTwo}" | sed -e "s/${defaultZone},//" -e "s/,/, /g" -e "s/:/,/")
        }
      }
    }
    unset IFS
    [ -n "${saved_IFS+set}" ] && {
      IFS=$saved_IFS
      unset saved_IFS
    }
  }
}
[ ${numZones} -gt 3 ] && {
  secondZone=$(echo "${zones}" | awk -F ',' ' { print $2 } ' | sed -e "s/^ //")
  withSecondZone=$(${SUDO} ${SARG} ${SUSR} ${ROON}/bin/get_zone_info -l -z "${secondZone}")
  withSecondZone=$(echo ${withSecondZone} | sed -e "s/${defaultZone},//")
  numWith=$(echo "${withSecondZone}" | awk -F ',' ' { print NF } ')
  [ -z "${numWith//[0-9]}" ] && {
    if [ ${numWith} -gt 1 ]; then
      withDefOne=$(echo "${withSecondZone}" | awk -F ',' ' { print $1 ", " $2 } ')
      groupRee="${secondZone}, ${withDefOne}"
    else
      [ ${numWith} -gt 0 ] && {
        withDefOne=$(echo "${withSecondZone}" | awk -F ',' ' { print $1 } ')
        groupRee="${secondZone}, ${withDefOne}"
      }
    fi
  }
}
[ ${numZones} -gt 4 ] && {
  lastZone=$(echo "${zones}" | awk -F ',' ' { print $(NF) } ' | sed -e "s/^ //")
  withLastZone=$(${SUDO} ${SARG} ${SUSR} ${ROON}/bin/get_zone_info -l -z "${lastZone}")
  withLastZone=$(echo ${withLastZone} | sed -e "s/${defaultZone},//")
  withLastZone=$(echo ${withLastZone} | sed -e "s/${secondZone},//")
  numWith=$(echo "${withLastZone}" | awk -F ',' ' { print NF } ')
  if [ ${numWith} -gt 2 ]; then
    withDefOne=$(echo "${withLastZone}" | awk -F ',' ' { print $(NF-2) ", " $(NF-1) ", " $(NF) } ')
    groupFor="${lastZone}, ${withDefOne}"
  else
    if [ ${numWith} -gt 1 ]; then
      withDefOne=$(echo "${withLastZone}" | awk -F ',' ' { print $(NF-1) ", " $(NF) } ')
      groupFor="${lastZone}, ${withDefOne}"
    else
      [ ${numWith} -gt 0 ] && {
        withDefOne=$(echo "${withLastZone}" | awk -F ',' ' { print $(NF) } ')
        groupFor="${lastZone}, ${withDefOne}"
      }
    fi
  fi
}

cat ${ROON_INI} \
  | sed -e "s/__ALL_ZONES__/${zones}/" \
  -e "s/__GROUP_ONE__/${groupOne}/" \
  -e "s/__GROUP_TWO__/${groupTwo}/" \
  -e "s/__GROUP_REE__/${groupRee}/" \
  -e "s/__GROUP_FOR__/${groupFor}/" \
  -e "s/__VERSION__/${version}/" \
  -e "s/__RELEASE__/${release}/" \
  -e "s/__DEF_ZONE__/${defaultZone}/" >/tmp/zones$$

[ -s /tmp/zones$$ ] && cp /tmp/zones$$ ${ROON_INI}
rm -f /tmp/zones$$

DEFZONE=$(grep ^DefaultZone ${ROON_INI} | awk -F '=' ' { print $2 } ')
# Remove leading and trailing spaces in DEFZONE
DEFZONE="$(echo -e "${DEFZONE}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
# Set ROON_ZONE in pyroonconf if not already set
if [ -s ${ROONCONF} ]; then
  grep ROON_ZONE ${ROONCONF} >/dev/null || {
    echo "ROON_ZONE=\"$DEFZONE\"" >>${ROONCONF}
  }
else
  echo "ROON_ZONE=\"$DEFZONE\"" >${ROONCONF}
fi

echo ""
echo "Verify the 'server' and 'user' settings in the roon script are correct."
echo "If you wish to deploy RoonCommandLine on other systems, install the package"
echo "there or copy the 'roon' frontend shell script to a location in your execution"
echo "PATH on those systems from which you wish to control Roon via SSH."
echo ""
echo "Edit the Roon Command Line configuration settings at:"
echo "${ROON_INI}"
echo "and verify the settings in the configuration file ${ROONCONF}"
