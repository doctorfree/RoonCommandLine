#!/bin/bash
#
# Written by Ron Record <rr@ronrecord.com> December, 2022
#
# roon_faded - Run in the background checking if the zone state is playing and
#              if so, fade volume at end of song then restore volume level.
#              Launched by 'roon_fade on', stopped by 'roon_fade off'
#
# Usage: roon_faded [-l] [-z zone]
# Where: '-l' indicates logging, '-z zone' specifies zone in which to fade
#        If no zone is specified the default zone is used
#
# This is tricky in Roon due to the fact that multiple songs can be playing in
# multiple zones, zones can be grouped with the same audio in all zones, each
# zone in a zone grouping has separate volume controls and ranges, and multiple
# devices can be used to adjust volume by zone or output. It becomes fairly
# complex trying to cover all use cases. This is a beginning.

# TODO: Run separate roon_faded daemons for each zone or grouped zones to
#       support fading on some zones but not on others or multiple fading zones.
#       Right now you're either always fading or always not in a single zone or
#       grouped zone and multiple grouped or ungrouped zones are not supported.
# TODO: This should be a Python script using the Python Roon API to register
#       for callbacks to monitor track end/start and volume adjustments.
#       But it would be difficult to code all the logic here in Python so
#       figure out a way to surface the callback(s) up to this script.

ROON=/usr/local/Roon
ROONETC=${ROON}/etc
ROONCONF=${ROONETC}/pyroonconf
FADECONF=${ROONETC}/fadeconf
FADE_DRTN=30
FADE_ZONE=
LOG=

init_conf() {
  # Get the zone if it is set
  if [ -f ${ROONCONF} ]
  then
    . ${ROONCONF}
  else
    DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | awk -F '=' ' { print $2 } '`
    ${ROON}/bin/set_zone $DEFZONE
    . ${ROONCONF}
  fi
  if [ -f ${FADECONF} ]
  then
    . ${FADECONF}
  else
    echo "FADE_ZONE=\"${ROON_ZONE}\"" > ${FADECONF}
    . ${FADECONF}
  fi
}

init_conf

# If fade duration is set in pyroonconf then use that value
[ "${FADE_DURATION}" ] && {
    FADE_DRTN=${FADE_DURATION}
}

# TODO: Find a better way to determine if next track is about to play.
#       For now, if last call to get remaining time is less than FADE_ENDS.
#       Use slightly less value when not fading in.
if [ "${FADE_IN_ENDS}" ]
then
    FADE_ENDS=${FADE_IN_ENDS}
else
    FADE_ENDS=5
fi

get_remain() {
    # Returned lines look like:
    #   HomePod Max: Time remaining = 674 seconds, State = paused
    remline=`get_zone_remaining -z "$1"`
    remain=`echo "${remline}" | awk -F ',' ' { print $1 } ' | \
                                awk -F ':' ' { print $2 } ' | \
                                awk -F '=' ' { print $2 } ' | \
                                sed -e 's/^ *//' -e 's/ *$//' | \
                                awk ' { print $1 } '`
}

get_state_remain() {
    # Returned lines look like:
    #   HomePod Max: Time remaining = 674 seconds, State = paused
    remline=`get_zone_remaining -z "$1"`
    state=`echo "${remline}" | awk -F ',' ' { print $2 } ' | \
                               awk -F '=' ' { print $2 } ' | \
                               sed -e 's/^ *//' -e 's/ *$//'`
    remain=`echo "${remline}" | awk -F ',' ' { print $1 } ' | \
                                awk -F ':' ' { print $2 } ' | \
                                awk -F '=' ' { print $2 } ' | \
                                sed -e 's/^ *//' -e 's/ *$//' | \
                                awk ' { print $1 } '`
}

# Parse the arguments to get the command and zone
while getopts "lz:" flag; do
    case $flag in
        l)
            LOG="${ROONETC}/faded_log.txt"
            [ -f "${LOG}" ] || touch "${LOG}"
            ;;
        z)
            FADE_ZONE="$OPTARG"
            ;;
    esac
done

[ "${FADE_ZONE}" ] || FADE_ZONE="${ROON_ZONE}"

[ "${LOG}" ] && {
    echo "Logging roon_faded in ${LOG} for zone ${FADE_ZONE}" >> "${LOG}"
    echo "FADE_ENDS = ${FADE_ENDS}, FADE_DRTN=${FADE_DRTN}" >> "${LOG}"
}

# Restore volume levels in all fading zones
restore_volume() {
    for z in ${!zones[@]}
    do
        cvol=${curvol[$z]}
        zone=${zones[$z]}
        set_volume -v "${cvol}" -z "${zone}"
    done
}

# get_zone_volume returns an ungrouped zone like this:
#
# get_zone_volume -z Kitchen
#   Kitchen: Volume = -26, Min = -80, Max = 0
#
# A grouped zone returns all zones in a grouped zone:
#
# get_zone_volume -g -z "HomePod Max"
#   HomePod Max: Volume = 62, Min = 1, Max = 100
#   HomePod Mini Left: Volume = 72, Min = 1, Max = 100
#   HomePod Mini Right: Volume = 72, Min = 1, Max = 100
init_fade_vals() {
  zones=()
  curvol=()
  minvol=()
  outstepsz=()
  instepsz=()
  outdiv=$((FADE_DRTN / 4))
  indiv=$((FADE_DRTN / 6))
  while read voline
  do
    zone=`echo "${voline}" | awk -F ':' ' { print $1 } ' | \
                             sed -e 's/^ *//' -e 's/ *$//'`
    zones+=( "${zone}" )
    volume=`echo "${voline}" | awk -F ':' ' { print $2 } ' | \
                               awk -F ',' ' { print $1 } ' | \
                               awk -F '=' ' { print $2 } ' | \
                               sed -e 's/^ *//' -e 's/ *$//'`
    curvol+=( ${volume} )
    minimum=`echo "${voline}" | awk -F ':' ' { print $2 } ' | \
                                awk -F ',' ' { print $2 } ' | \
                                awk -F '=' ' { print $2 } ' | \
                                sed -e 's/^ *//' -e 's/ *$//'`
    minvol+=( ${minimum} )
    diff=$((volume - minimum))
    outstep=$((diff / outdiv))
    outstepsz+=( ${outstep} )
    instep=$((diff / indiv))
    instepsz+=( ${instep} )
  done < <(get_zone_volume -g -z "${FADE_ZONE}")
}

init_fade_vals

finish=()
for z in ${!zones[@]}
do
  finish+=( 0 )
  [ "${LOG}" ] && {
    outstep=${outstepsz[$z]}
    instep=${instepsz[$z]}
    zone=${zones[$z]}
    mvol=${minvol[$z]}
    echo "Zone: ${zone}, outstep=${outstep}, instep=${instep}, minvol=${mvol}" >> "${LOG}"
  }
done

fading=
logsleep=
lognull=
notnull=
state=
remain=
restored=1
sleeping=
while true
do
    init_conf
    [ "${FADE_INIT}" ] && {
        grep -v FADE_INIT ${FADECONF} > /tmp/fade$$
        cp /tmp/fade$$ ${FADECONF}
        rm -f /tmp/fade$$
        FADE_INIT=
        [ "${LOG}" ] && {
            echo "FADE_INIT detected, re-initializing fade values" >> "${LOG}"
        }
        init_fade_vals
    }
    [ "${RESTORE_VOLUME}" ] && {
        [ "${LOG}" ] && {
            echo "RESTORE_VOLUME detected, restoring volume levels" >> "${LOG}"
        }
        restore_volume
        grep -v RESTORE_VOLUME ${FADECONF} > /tmp/fade$$
        cp /tmp/fade$$ ${FADECONF}
        rm -f /tmp/fade$$
        RESTORE_VOLUME=
    }
    [ "${ROON_FADE}" = true ] || {
        [ "${LOG}" ] && {
            echo "ROON_FADE disabled, roon_faded exiting" >> "${LOG}"
        }
        restore_volume
        exit 0
    }
    [ "${FADE_DURATION}" ] && {
        [ "${FADE_DURATION}" == "${FADE_DRTN}" ] || {
            # Fade duration changed in pyroonconf
            [ "${LOG}" ] && {
              echo "Detected change to fade duration, re-initializing" >> "${LOG}"
            }
            FADE_DRTN=${FADE_DURATION}
            init_fade_vals
        }
    }

    FADE_ENDS=4

    # Check if zone grouping has changed
    chkzones=()
    while read zoneline
    do
      chk_zone=`echo "${zoneline}" | awk -F ':' ' { print $1 } ' | \
                                     sed -e 's/^ *//' -e 's/ *$//'`
      chkzones+=( "${chk_zone}" )
    done < <(get_zone_volume -g -z "${FADE_ZONE}")

    numdiff=`echo ${zones[@]} ${chkzones[@]} | \
             tr ' ' '\n' | sort | uniq -u | wc -l`
    [ ${numdiff} -eq 0 ] || {
        [ "${LOG}" ] && {
          echo "Detected change to zone grouping, re-initializing" >> "${LOG}"
        }
        init_fade_vals
    }

    # Get remaining time and state of zone
    get_state_remain "${zones[0]}"
    if [ "${state}" == "playing" ]
    then
        [ "${LOG}" ] && {
          [ "${sleeping}" ] && {
            echo "Found zone in playing state" >> "${LOG}"
            logsleep=
          }
        }
        sleeping=
    else
        [ "${LOG}" ] && {
          [ "${sleeping}" ] || {
            [ "${logsleep}" ] || {
              echo "Sleeping waiting for playing state" >> "${LOG}"
              logsleep=1
            }
          }
        }
        sleeping=1
        sleep ${FADE_DRTN}
        continue
    fi
    if [ "${remain}" == "null" ]
    then
        [ "${LOG}" ] && {
          [ "${notnull}" ] || {
            [ "${lognull}" ] || {
              echo "Sleeping waiting for remaining time not null" >> "${LOG}"
              lognull=1
            }
          }
        }
        notnull=1
        sleep ${FADE_DRTN}
        continue
    else
        [ "${LOG}" ] && {
          [ "${notnull}" ] && {
            echo "Found remaining time not null" >> "${LOG}"
            lognull=
          }
        }
        notnull=
    fi
    if [ ${remain} -lt ${FADE_DRTN} ] && [ "${restored}" ]
    then
        [ "${LOG}" ] && {
            echo "Remaining time less than ${FADE_DRTN} seconds, starting fade" >> "${LOG}"
        }
        fading=1
        restored=
        while true
        do
            # Corner case where user disabled fading during a fade
            grep "ROON_FADE=false" ${FADECONF} > /dev/null && {
              [ "${LOG}" ] && {
                echo "ROON_FADE disabled during fade, roon_faded exiting" >> "${LOG}"
              }
              restore_volume
              exit 0
            }
            # Fade volume in fading zone and grouped zones
            for z in ${!zones[@]}
            do
              step=${outstepsz[$z]}
              zone=${zones[$z]}
              mvol=${minvol[$z]}
              zvol=`get_zone_volume -n -z "${zone}"`
              if [ ${zvol} -le ${mvol} ]
              then
                [ ${finish[$z]} -eq 1 ] || finish[$z]=1
              else
                set_volume -r -v "-${step}" -z "${zone}"
              fi
            done
            faded=1
            for fin in ${finish[@]}
            do
                [ ${fin} -eq 0 ] && {
                    faded=
                    break
                }
            done
            # Get remaining time
            get_remain "${zones[0]}"
            [ ${remain} -lt ${FADE_ENDS} ] || [ ${remain} -ge ${FADE_DRTN} ] && {
              for f in ${!finish[@]}
              do
                finish[$f]=0
              done
              [ "${LOG}" ] && {
                echo "Fade out complete in all zones" >> "${LOG}"
              }
              break
            }
        done
    else
        [ ! "${restored}" ] || [ "${fading}" ] && {
            while true
            do
              for z in ${!zones[@]}
              do
                cvol=${curvol[$z]}
                zone=${zones[$z]}
                step=${instepsz[$z]}
                zvol=`get_zone_volume -n -z "${zone}"`
                boom=$((cvol - zvol))
                if [ ${boom} -le ${step} ]
                then
                  [ ${finish[$z]} -eq 1 ] || {
                    [ "${LOG}" ] && {
                      echo "Restoring ${zone} to previous volume" >> "${LOG}"
                    }
                    set_volume -v "${cvol}" -z "${zone}"
                    finish[$z]=1
                  }
                else
                  set_volume -r -v "${step}" -z "${zone}"
                fi
              done
              faded=1
              for fin in ${finish[@]}
              do
                  [ ${fin} -eq 0 ] && {
                      faded=
                      break
                  }
              done
              [ "${faded}" ] && {
                for f in ${!finish[@]}
                do
                  finish[$f]=0
                done
                fading=
                restored=1
                break
              }
            done
            [ "${faded}" ] && {
              [ "${LOG}" ] && {
                echo "Volume levels restored" >> "${LOG}"
              }
              fading=
              restored=1
            }
        }
        sleep ${FADE_ENDS}
        continue
    fi
done

[ "${LOG}" ] && {
    echo "Unexpectedly, roon_faded exiting" >> "${LOG}"
}
exit 0
