#!/bin/bash
#
# Postinstall script for rooncommandline
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>

ROON=/usr/local/Roon
ROONETC=${ROON}/etc
ROON_INI=${ROONETC}/roon_api.ini
ROONCONF=${ROONETC}/pyroonconf
PIPARGS="--no-cache-dir --upgrade --force-reinstall"

export PATH=$PATH:/usr/local/bin
if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
else
  if [ -x /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    [ -x /usr/local/bin/brew ] && eval "$(/usr/local/bin/brew shellenv)"
  fi
fi

PYTHON=
python3_inst=$(type -p python3)
if [ "${python3_inst}" ]; then
  PYTHON="python3"
else
  PYTHON="python"
fi

[ -d ${ROON} ] || mkdir -p ${ROON}
# Create the RoonCommandLine Python virtual environment
${PYTHON} -m venv ${ROON}/venv >/dev/null 2>&1
# Use the RoonCommandLine Python virtual environment
[ -f ${ROON}/venv/bin/activate ] && source ${ROON}/venv/bin/activate
[[ ":$PATH:" == *":/usr/local/Roon/venv/bin:"* ]] || {
  export PATH=/usr/local/Roon/venv/bin:${PATH}
}
[ -x ${ROON}/venv/bin/python ] && export PYTHON=${ROON}/venv/bin/python
# Make sure we have pip installed
${PYTHON} -m ensurepip --upgrade >/dev/null 2>&1
[ -x ${ROON}/venv/bin/pip ] || {
  PYOUT="/tmp/get-pip$$.py"
  PYURL="https://bootstrap.pypa.io/get-pip.py"
  have_curl=$(type -p curl)
  if [ "${have_curl}" ]; then
    curl -sSL -o ${PYOUT} ${PYURL}
  else
    have_wget=$(type -p wget)
    if [ "${have_wget}" ]; then
      wget -q -O ${PYOUT} ${PYURL}
    else
      echo "WARNING: Unable to locate curl or wget to download pip install script"
    fi
  fi
  if [ -f ${PYOUT} ]; then
    ${PYTHON} ${PYOUT}
  else
    echo "WARNING: pip install script not found"
  fi
  rm -f ${PYOUT}
}
[ -x ${ROON}/venv/bin/pip ] || {
  echo "WARNING: ${ROON}/venv/bin/pip not found or not executable"
}

${PYTHON} -m pip install ${PIPARGS} roonapi >/dev/null 2>&1
${PYTHON} -m pip install ${PIPARGS} rich-cli >/dev/null 2>&1

[ -d /usr/local ] || mkdir /usr/local
[ -d /usr/local/bin ] || mkdir /usr/local/bin
cd /usr/local/bin

for command in "${ROON}"/bin/*; do
  b=$(basename "${command}")
  if [ -f "${b}" ]; then
    diff "${command}" "${b}" >/dev/null || {
      rm -f "${b}"
      ln -s "${command}" .
    }
  else
    ln -s "${command}" .
  fi
done

ROON_DOC=/usr/local/share/doc/rooncommandline
if [ -f "${ROON_DOC}/VERSION" ]; then
  . "${ROON_DOC}/VERSION"
  version=${VERSION}
  release=${RELEASE}
else
  # Should not happen but if it did we fake it
  version="2.1.4"
  release="1"
fi

# Copy in distributed roon_api.ini template if no previous one exists
[ -s ${ROON_INI} ] || {
  # Restore previously saved roon_api.ini and pyroonconf
  TMP_ROON_API="/tmp/_roon_api_ini_.save"
  if [ -s ${TMP_ROON_API} ]; then
    if grep defaultalbum "${TMP_ROON_API}" >/dev/null; then
      cp ${ROONETC}/roon_api.ini-dist ${ROON_INI}
    else
      if grep DefaultZone "${TMP_ROON_API}" >/dev/null; then
        if grep RoonCorePort "${TMP_ROON_API}" >/dev/null; then
          echo "Restoring saved ${ROON_INI}"
          cp ${TMP_ROON_API} ${ROON_INI}
        else
          cp ${ROONETC}/roon_api.ini-dist ${ROON_INI}
        fi
      else
        cp ${ROONETC}/roon_api.ini-dist ${ROON_INI}
      fi
    fi
    rm -f ${TMP_ROON_API}
  else
    cp ${ROONETC}/roon_api.ini-dist ${ROON_INI}
  fi
}

updatever=
grep RoonCommandLineVersion ${ROON_INI} >/dev/null && updatever=1
if [ "${updatever}" ]; then
  cat ${ROON_INI} | sed -e "s/RoonCommandLineVersion.*/RoonCommandLineVersion = ${version}/" >/tmp/v$$
else
  cat ${ROON_INI} | sed -e "/RoonCorePort.*/a RoonCommandLineVersion = ${version}" >/tmp/v$$
fi
[ -s /tmp/v$$ ] && cp /tmp/v$$ ${ROON_INI}
rm -f /tmp/v$$

updaterel=
grep RoonCommandLineRelease ${ROON_INI} >/dev/null && updaterel=1
if [ "${updaterel}" ]; then
  cat ${ROON_INI} | sed -e "s/RoonCommandLineRelease.*/RoonCommandLineRelease = ${release}/" >/tmp/r$$
else
  cat ${ROON_INI} | sed -e "/RoonCommandLineVersion.*/a RoonCommandLineRelease = ${release}" >/tmp/r$$
fi
[ -s /tmp/r$$ ] && cp /tmp/r$$ ${ROON_INI}
rm -f /tmp/r$$

IP=$(hostname -I | awk ' { print $1 } ')

ROON_SSH_USER="root"
numusers=0
users=()
for homedir in /home/*; do
  [ "${homedir}" == "/home/*" ] && continue
  [ -d "${homedir}" ] && {
    username=$(basename "${homedir}")
    exists=$(id -g -n "${username}" 2>/dev/null)
    [ "${exists}" ] && {
      ROON_SSH_USER="${username}"
      users+=("${username}")
      numusers=$((numusers + 1))
    }
  }
done
[ $numusers -gt 1 ] && {
  # Check for ROON_USER environment variable, use if set
  if [ "${ROON_USER}" ] && [ -d /home/"${ROON_USER}" ]; then
      ROON_SSH_USER="${ROON_USER}"
      numusers=1
  else
    # Unattended installs use the last user found
    [ "${ROON_UNATTENDED}" ] && numusers=1
  fi
}
[ $numusers -gt 1 ] && {
  # Create a selection dialog to allow user to select USER
  PS3="Please enter SSH user (numeric or text): "
  users+=("None")
  select opt in "${users[@]}"; do
    case "$opt,$REPLY" in
      "None",* | *,"None")
        break
        ;;
      *)
        [ -d /home/"${opt}" ] && {
          ROON_SSH_USER="${opt}"
          break
        }
        printf "\nInvalid entry. Please try again"
        printf "\nEnter either a number or text of one of the menu entries\n"
        ;;
    esac
  done
}

# Copy in saved pyroonconf if it exists
[ -s ${ROONCONF} ] || {
  # Restore previously saved pyroonconf
  if [ -s /tmp/_pyroonconf_.save ]; then
    echo "Restoring saved ${ROONCONF}"
    cp /tmp/_pyroonconf_.save ${ROONCONF}
    rm -f /tmp/_pyroonconf_.save
  fi
}

echo "Enabling local access in ${ROONCONF}"
if [ -s ${ROONCONF} ]; then
  grep -v ^LOCAL= ${ROONCONF} >/tmp/roon$$
  echo "LOCAL=true" >>/tmp/roon$$
else
  echo "LOCAL=true" >/tmp/roon$$
fi
[ -s /tmp/roon$$ ] && cp /tmp/roon$$ ${ROONCONF}
rm -f /tmp/roon$$

echo "Setting the Python Roon API server IP address to $IP"
cat ${ROON}/bin/roon | sed -e "s/XX.X.X.XXX/$IP/" -e "s/SSH_USERNAME/$ROON_SSH_USER/" >/tmp/roon$$
cp ${ROON}/bin/roon ${ROON}/bin/roon.orig
[ -s /tmp/roon$$ ] && cp /tmp/roon$$ ${ROON}/bin/roon
rm -f /tmp/roon$$

PYTHONUSERBASE=
# Check the global site directories
SITES=($(${PYTHON} -c 'import site; print(site.getsitepackages())' | tr -d '[],'))
for site in ${SITES[@]}; do
  site=$(echo $site | sed -e "s/'//g")
  [ -d "${site}/roonapi" ] && {
    PYTHONUSERBASE=$(echo ${site} | awk -F "/lib/" ' { print $1 } ')
    PYTHON_SITEDIR=$(echo ${site} | awk -F "/dist-packages" ' { print $1 } ')
    break
  }
done

if [ "${PYTHONUSERBASE}" ]; then
  if [ -s ${ROONCONF} ]; then
    grep PYTHONUSERBASE ${ROONCONF} >/dev/null || {
      echo "export PYTHONUSERBASE=${PYTHONUSERBASE}" >>${ROONCONF}
    }
  else
    echo "export PYTHONUSERBASE=${PYTHONUSERBASE}" >${ROONCONF}
  fi
  . ${ROONCONF}

  RVER=$(${PYTHON} -m pip show roonapi | grep Version | awk -F ':' ' { print $2 } ')
  # Remove leading and trailing spaces in RVER
  RVER="$(echo -e "${RVER}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
  # Only patch Roonapi version 0.0.38 and earlier
  LESSER=$(echo "${RVER} 0.0.38" | tr " " "\n" | sort -V | head -n 1)
  if [ "${LESSER}" != "${RVER}" ]; then
    # Mark it as having been patched
    grep -v ROONAPIPATCHED ${ROONCONF} >/tmp/roonconf$$
    echo "ROONAPIPATCHED=true" >>/tmp/roonconf$$
    cp /tmp/roonconf$$ ${ROONCONF}
    rm -f /tmp/roonconf$$
  else
    # Apply the Python Roon API patch if it has not already been applied
    if [ "${ROONAPIPATCHED}" = true ]; then
      echo "Python Roon API already patched. Skipping patch."
    else
      # Locate the patch file
      ROONAPI_PATCH=roonapi-listmedia.patch
      patchfile=
      if [ -f ${ROON}/patches/${ROONAPI_PATCH} ]; then
        patchfile=${ROON}/patches/${ROONAPI_PATCH}
      else
        echo "Cannot locate patch file ${ROONAPI_PATCH}"
        echo "Python Roon API patch not applied."
        echo "List commands will not function properly."
      fi
      [ "${patchfile}" ] && {
        if type -p patch >/dev/null; then
          cd ${PYTHON_SITEDIR}
          patch -b -p0 <${patchfile}
          grep -v ROONAPIPATCHED ${ROONCONF} >/tmp/roonconf$$
          echo "ROONAPIPATCHED=true" >>/tmp/roonconf$$
          cp /tmp/roonconf$$ ${ROONCONF}
          rm -f /tmp/roonconf$$
        else
          echo "Cannot locate the patch utility. Either patch is not installed"
          echo "or it is not in your execution PATH."
          echo ""
          echo "Skipping the patch for the Python Roon API."
          echo "Listing of Roon library media will not work without this patch."
        fi
      }
    fi
  fi
else
  echo "Could not locate the roonapi Python module installation directory"
  echo "Python Roon API patch not applied."
  echo "List commands will not function properly."
fi

if [ "${ROON_SSH_USER}" ]; then
  GROUP=$(id -g -n "${ROON_SSH_USER}")
  chown -R "${ROON_SSH_USER}":"${GROUP}" ${ROONETC}
  if [ "${ROON_SSH_USER}" == "root" ]; then
    SUDO=
    SARG=
    SUSR=
  else
    SUDO="sudo"
    SARG="-u"
    SUSR="${ROON_SSH_USER}"
  fi
else
  SUDO=
  SARG=
  SUSR=
fi

# Install utilities used by the RoonCommandLine menu system
[ -x ${ROON}/etc/install-figlet ] && ${SUDO} ${SARG} ${SUSR} ${ROON}/etc/install-figlet
[ -x ${ROON}/etc/install-fzf ] && ${SUDO} ${SARG} ${SUSR} ${ROON}/etc/install-fzf
[ -x ${ROON}/etc/install-gum ] && ${SUDO} ${SARG} ${SUSR} ${ROON}/etc/install-gum

echo ""
if [ "${ROON_UNATTENDED}" ]; then
  echo "Roon Core discovery and authorizing the RoonCommandLine extension"
  echo "must be performed post-installation in unattended installations."
  echo "After the installation of RoonCommandLine completes, run the command:"
  echo "    roon -c discover"
else
  ${ROON}/etc/discover "${SUDO}" "${SARG}" "${SUSR}"
fi
echo ""

[ "${ROON_SSH_USER}" ] && chown -R ${ROON_SSH_USER}:${GROUP} ${ROONETC}

exit 0
