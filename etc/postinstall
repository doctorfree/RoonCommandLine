#!/bin/bash
#
# Postinstall script for rooncommandline
#
# Author: Ronald Joe Record <ronaldrecord@gmail.com>
#

set -e

# update-alternatives --install /usr/bin/python python /usr/bin/python3 10
PYTHON=
python3_inst=`type -p python3`
if [ "${python3_inst}" ]
then
    PYTHON="python3"
else
    PYTHON="python"
fi
# ${PYTHON} -m ensurepip --upgrade
${PYTHON} -m pip install roonapi
export PATH=/usr/local/bin:/usr/bin:$PATH
[ -d /usr/local ] || mkdir /usr/local
[ -d /usr/local/bin ] || mkdir /usr/local/bin
cd /usr/local/bin
ROON=/usr/local/Roon
ROONAPI=${ROON}/api
ROONETC=${ROON}/etc
ROONCONF=${ROONETC}/pyroonconf
for command in ${ROON}/bin/*
do
  b=`basename ${command}`
  if [ -f ${b} ]
  then
      diff ${command} ${b} > /dev/null && {
          rm -f ${b}
          ln -s ${command} .
      }
  else
      ln -s ${command} .
  fi
done
IP=`hostname -I | awk ' { print $1 } '`

USER="root"
numusers=0
users=
for homedir in /home/*
do
    [ "${homedir}" == "/home/*" ] && continue
    [ -d ${homedir} ] && {
        username=`basename ${homedir}`
        exists=`id -g -n ${username} > /dev/null 2>&1`
        [ "${exists}" ] && {
            users="${users} ${username}"
            numusers=`expr ${numusers} + 1`
        }
    }
done
[ $numusers -gt 1 ] && {
    # Create a selection dialog to allow user to select USER
    PS3="${BOLD}Please enter SSH user (numeric or text): ${NORMAL}"
    options=(${users} "None")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
        "None",*|*,"None")
            break
            ;;
        *)
            [ -d /home/${opt} ] && {
                USER="${opt}"
                break
            }
            printf "\nInvalid entry. Please try again"
            printf "\nEnter either a number or text of one of the menu entries\n"
            ;;
      esac
    done
}

echo "Setting the Python Roon API server IP address to $IP"

echo "Enabling local access in ${ROONCONF}"
if [ -f ${ROONCONF} ]
then
    grep -v ^LOCAL= ${ROONCONF} > /tmp/roon$$
    echo "LOCAL=true" >> /tmp/roon$$
else
    echo "LOCAL=true" > /tmp/roon$$
fi
cp /tmp/roon$$ ${ROONCONF}
rm -f /tmp/roon$$

cat ${ROON}/bin/roon | sed -e "s/XX.X.X.XXX/$IP/" -e "s/SSH_USERNAME/$USER/" > /tmp/roon$$
cp ${ROON}/bin/roon ${ROON}/bin/roon.orig
cp /tmp/roon$$ ${ROON}/bin/roon
rm -f /tmp/roon$$

PYTHONUSERBASE=
# Check the global site directories
SITES=($(${PYTHON} -c 'import site; print(site.getsitepackages())' | tr -d '[],'))
for site in ${SITES[@]}
do
    site=`echo $site | sed -e "s/'//g"`
    [ -d "${site}/roonapi" ] && {
        PYTHONUSERBASE=`echo ${site} | awk -F "/lib/" ' { print $1 } '`
        PYTHON_SITEDIR=`echo ${site} | awk -F "/dist-packages" ' { print $1 } '`
        break
    }
done

if [ "${PYTHONUSERBASE}" ]
then
    if [ -f ${ROONCONF} ]
    then
        grep PYTHONUSERBASE ${ROONCONF} > /dev/null || {
            echo "export PYTHONUSERBASE=${PYTHONUSERBASE}" >> ${ROONCONF}
        }
    else
        echo "export PYTHONUSERBASE=${PYTHONUSERBASE}" > ${ROONCONF}
    fi
    . ${ROONCONF}

    RVER=`${PYTHON} -m pip show roonapi | grep Version | awk -F ':' ' { print $2 } '`
    # Remove leading and trailing spaces in RVER
    RVER="$(echo -e "${RVER}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    # Only patch Roonapi version 0.0.38 and earlier
    LESSER=$(echo "${RVER} 0.0.38" | tr " " "\n" | sort -V | head -n 1)
    if [ "${LESSER}" != "${RVER}" ]
    then
      # Mark it as having been patched
      grep -v ROONAPIPATCHED ${ROONCONF} > /tmp/roonconf$$
      echo "ROONAPIPATCHED=true" >> /tmp/roonconf$$
      cp /tmp/roonconf$$ ${ROONCONF}
      rm -f /tmp/roonconf$$
    else
      # Apply the Python Roon API patch if it has not already been applied
      if [ "${ROONAPIPATCHED}" = true ]
      then
        echo "Python Roon API already patched. Skipping patch."
      else
        # Locate the patch file
        ROONAPI_PATCH=roonapi-listmedia.patch
        patchfile=
        if [ -f ${ROON}/patches/${ROONAPI_PATCH} ]
        then
            patchfile=${ROON}/patches/${ROONAPI_PATCH}
        else
            echo "Cannot locate patch file ${ROONAPI_PATCH}"
            echo "Python Roon API patch not applied."
            echo "List commands will not function properly."
        fi
        [ "${patchfile}" ] && {
            if type -p patch > /dev/null
            then
                cd ${PYTHON_SITEDIR}
                patch -b -p0 < ${patchfile}
                grep -v ROONAPIPATCHED ${ROONCONF} > /tmp/roonconf$$
                echo "ROONAPIPATCHED=true" >> /tmp/roonconf$$
                cp /tmp/roonconf$$ ${ROONCONF}
                rm -f /tmp/roonconf$$
            else
                echo "Cannot locate the patch utility. Either patch is not installed"
                echo "or it is not in your execution PATH."
                echo ""
                echo "Skipping the patch for the Python Roon API."
                echo "Listing of Roon library media will not work without this patch."
            fi
        }
      fi
    fi
else
    echo "Could not locate the roonapi Python module installation directory"
    echo "Python Roon API patch not applied."
    echo "List commands will not function properly."
fi

[ "${USER}" ] && {
    GROUP=`id -g -n ${USER}`
    chown -R ${USER}:${GROUP} ${ROONETC}
}

echo ""
echo "In order to configure the Python Roon API we must set the IP address"
echo "of the Roon Core. Discovery will be used to determine the Roon Core IP."
echo "When prompted for authorization, go to a Roon Remote window and click"
echo "    Settings -> Extensions -> Enable"
echo "to authorize discovery"
echo ""

# Get and set the Roon Core IP address
${ROON}/bin/get_core_ip 2>&1 | tee /tmp/discover$$
CORE_IP=`cat /tmp/discover$$ | grep RoonCoreIP | awk -F '=' ' { print $2 } '`
CORE_IP="$(echo -e "${CORE_IP}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
CORE_PORT=`cat /tmp/discover$$ | grep RoonCorePort | awk -F '=' ' { print $2 } '`
CORE_PORT="$(echo -e "${CORE_PORT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
cat ${ROONETC}/roon_api.ini | sed -e "s/XX.X.X.XX/${CORE_IP}/" -e "s/__CORE_PORT__/${CORE_PORT}/" > /tmp/core$$
cp ${ROONETC}/roon_api.ini ${ROONETC}/roon_api.ini.orig
cp /tmp/core$$ ${ROONETC}/roon_api.ini
rm -f /tmp/core$$ /tmp/discover$$

# Get and set the default zone and initial zone groupings
# Attempting to avoid grouping incompatible zones is somewhat convoluted
defaultZone=
groupOne=
groupTwo=
groupRee=
groupFor=
zones=`${ROON}/bin/get_zones`
numZones=`echo "${zones}" | awk -F ',' ' { print NF } '`
numWith=0
[ ${numZones} -gt 0 ] && {
  defaultZone=`echo "${zones}" | awk -F ',' ' { print $1 } '`
  withDefaultZone=`${ROON}/bin/get_zone_info -l "${defaultZone}"`
  numWith=`echo "${withDefaultZone}" | awk -F ',' ' { print NF } '`
}
[ ${numZones} -gt 2 ] && {
  [ ${numWith} -gt 0 ] && {
    withDefOne=`echo "${withDefaultZone}" | awk -F ',' ' { print $1 } '`
    groupOne="${defaultZone}, ${withDefOne}"
    [ ${numWith} -gt 1 ] && {
      withDefTwo=`echo "${withDefaultZone}" | awk -F ',' ' { print $1 ", " $2 } '`
      groupTwo="${defaultZone}, ${withDefTwo}"
    }
  }
}
[ ${numZones} -gt 3 ] && {
  secondZone=`echo "${zones}" | awk -F ',' ' { print $2 } ' | sed -e "s/^ //"`
  withSecondZone=`${ROON}/bin/get_zone_info -l "${secondZone}"`
  withSecondZone=`echo ${withSecondZone} | sed -e "s/${defaultZone},//"`
  numWith=`echo "${withSecondZone}" | awk -F ',' ' { print NF } '`
  if [ ${numWith} -gt 1 ]
  then
    withDefOne=`echo "${withSecondZone}" | awk -F ',' ' { print $1 ", " $2 } '`
    groupRee="${secondZone}, ${withDefOne}"
  else
    [ ${numWith} -gt 0 ] && {
      withDefOne=`echo "${withSecondZone}" | awk -F ',' ' { print $1 } '`
      groupRee="${secondZone}, ${withDefOne}"
    }
  fi
}
[ ${numZones} -gt 4 ] && {
  lastZone=`echo "${zones}" | awk -F ',' ' { print $(NF) } ' | sed -e "s/^ //"`
  withLastZone=`${ROON}/bin/get_zone_info -l "${lastZone}"`
  withLastZone=`echo ${withLastZone} | sed -e "s/${defaultZone},//"`
  withLastZone=`echo ${withLastZone} | sed -e "s/${secondZone},//"`
  numWith=`echo "${withLastZone}" | awk -F ',' ' { print NF } '`
  if [ ${numWith} -gt 2 ]
  then
    withDefOne=`echo "${withLastZone}" | awk -F ',' ' { print $(NF-2) ", " $(NF-1) ", " $(NF) } '`
    groupFor="${lastZone}, ${withDefOne}"
  else
    if [ ${numWith} -gt 1 ]
    then
      withDefOne=`echo "${withLastZone}" | awk -F ',' ' { print $(NF-1) ", " $(NF) } '`
      groupFor="${lastZone}, ${withDefOne}"
    else
      [ ${numWith} -gt 0 ] && {
        withDefOne=`echo "${withLastZone}" | awk -F ',' ' { print $(NF) } '`
        groupFor="${lastZone}, ${withDefOne}"
      }
    fi
  fi
}
cat ${ROONETC}/roon_api.ini | \
    sed -e "s/__ALL_ZONES__/${zones}/" \
        -e "s/__GROUP_ONE__/${groupOne}/" \
        -e "s/__GROUP_TWO__/${groupTwo}/" \
        -e "s/__GROUP_REE__/${groupRee}/" \
        -e "s/__GROUP_FOR__/${groupFor}/" \
        -e "s/__DEF_ZONE__/${defaultZone}/" > /tmp/zones$$
cp /tmp/zones$$ ${ROONETC}/roon_api.ini
rm -f /tmp/zones$$

DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | awk -F '=' ' { print $2 } '`
# Remove leading and trailing spaces in DEFZONE
DEFZONE="$(echo -e "${DEFZONE}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
# Set ROON_ZONE in pyroonconf if not already set
if [ -f ${ROONCONF} ]
then
    grep ROON_ZONE ${ROONCONF} > /dev/null || {
        echo "ROON_ZONE=\"$DEFZONE\"" >> ${ROONCONF}
    }
else
    echo "ROON_ZONE=\"$DEFZONE\"" > ${ROONCONF}
fi

[ "${USER}" ] && chown -R ${USER}:${GROUP} ${ROONETC}

echo ""
echo "Verify the 'server' and 'user' settings in the roon script are correct"
echo "and copy the 'roon' frontend shell script to a location in your execution"
echo "PATH on all systems from which you wish to control Roon via SSH"
echo ""
echo "Edit the Roon Command Line configuration settings at:"
echo "${ROONETC}/roon_api.ini"
echo "and verify the settings in the configuration file ${ROONCONF}"
echo ""

exit 0
