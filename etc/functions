# RoonCommandLine utility functions

# Check for installed tools
have_brew=$(type -p brew)
have_fzf=$(type -p fzf)
have_rich=$(type -p rich)
have_tui=$(type -p roon-tui)
# URLs
fzf_url="https://raw.githubusercontent.com/junegunn/fzf/master/install"
rcl_url="https://raw.githubusercontent.com/doctorfree/RoonCommandLine"

# General functions

# Display a heading with rich or figlet
heading() {
  tput clear
  if [ "${have_rich}" ]; then
    rich "[cyan]$1[/cyan]" -p -a rounded -c -C
  else
    if [ "${use_figlet}" ]; then
      show_figlet "$2"
    else
      printf "\n$1\n"
    fi
  fi
  printf "\n"
}

# Add a component to the PATH environment variable
pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="$1${PATH:+":$PATH"}"
    export PATH
  fi
}

# Prompt before continuing
prompt_continue() {
  printf "\nPress ${BOLD}<Enter>${NORM} to continue ... "
  read -r yn
  tput clear
}

# Utility version install/upgrade functions
#
get_control_version() {
  VURL="${rcl_url}/master/VERSION"
  curl -fsSL "${VURL}" > /tmp/rcv$$
  rcver=$(cat /tmp/rcv$$ | grep VERSION | awk -F '=' '{ print $2 }')
  rcrel=$(cat /tmp/rcv$$ | grep RELEASE | awk -F '=' '{ print $2 }')
  rm -f /tmp/rcv$$
  echo "v${rcver}r${rcrel}"
}

get_install_version() {
  [ "${ROON}" ] || ROON="/usr/local/Roon"
  RC_INST="${ROON}/etc/VERSION"
  if [ -f ${RC_INST} ]; then
    rcver=$(grep ^VERSION= ${RC_INST} | awk -F '=' '{ print $2 }')
    rcrel=$(grep ^RELEASE= ${RC_INST} | awk -F '=' '{ print $2 }')
  else
    rcver=${VERSION}
    rcrel=${RELEASE}
  fi
  echo "v${rcver}r${rcrel}"
}

# check_three_version release_version install_version
check_three_version() {
  release_version="$1"
  install_version="$2"

  release_major=$(echo ${release_version} | awk -F '.' '{ print $1 }')
  release_midde=$(echo ${release_version} | awk -F '.' '{ print $2 }')
  release_minor=$(echo ${release_version} | awk -F '.' '{ print $3 }')
  [ "${release_major}" ] || release_major=0
  [ "${release_midde}" ] || release_midde=0
  [ "${release_minor}" ] || release_minor=0

  install_major=$(echo ${install_version} | awk -F '.' '{ print $1 }')
  install_midde=$(echo ${install_version} | awk -F '.' '{ print $2 }')
  install_minor=$(echo ${install_version} | awk -F '.' '{ print $3 }')
  [ "${install_major}" ] || install_major=0
  [ "${install_midde}" ] || install_midde=0
  [ "${install_minor}" ] || install_minor=0

  if [ ${release_major} -gt ${install_major} ]; then
    echo "${release_version}"
  else
    if [ ${release_midde} -gt ${install_midde} ]; then
      echo "${release_version}"
    else
      if [ ${release_minor} -gt ${install_minor} ]; then
        echo "${release_version}"
      else
        echo ""
      fi
    fi
  fi
}

# check_control_version release_version install_version
check_control_version() {
  release_version=$(echo $1 | awk -F 'r' '{ print $1 }' | sed -e "s/v//")
  release_release=$(echo $1 | awk -F 'r' '{ print $2 }')
  install_version=$(echo $2 | awk -F 'r' '{ print $1 }' | sed -e "s/v//")
  install_release=$(echo $2 | awk -F 'r' '{ print $2 }')
  release_major=$(echo ${release_version} | awk -F '.' '{ print $1 }')
  release_midde=$(echo ${release_version} | awk -F '.' '{ print $2 }')
  release_minor=$(echo ${release_version} | awk -F '.' '{ print $3 }')
  [ "${release_major}" ] || release_major=0
  [ "${release_midde}" ] || release_midde=0
  [ "${release_minor}" ] || release_minor=0
  [ "${release_release}" ] || release_release=0
  install_major=$(echo ${install_version} | awk -F '.' '{ print $1 }')
  install_midde=$(echo ${install_version} | awk -F '.' '{ print $2 }')
  install_minor=$(echo ${install_version} | awk -F '.' '{ print $3 }')
  [ "${install_major}" ] || install_major=0
  [ "${install_midde}" ] || install_midde=0
  [ "${install_minor}" ] || install_minor=0
  [ "${install_release}" ] || install_release=0
  if [ ${release_major} -gt ${install_major} ]; then
    echo "${release_version}"
  else
    if [ ${release_midde} -gt ${install_midde} ]; then
      echo "${release_version}"
    else
      if [ ${release_minor} -gt ${install_minor} ]; then
        echo "${release_version}"
      else
        if [ ${release_release} -gt ${install_release} ]; then
          echo "${release_version}"
        else
          echo ""
        fi
      fi
    fi
  fi
}

show_versions() {
  printf "\n"
  control_version=$(get_control_version)
  install_version=$(get_install_version)
  if [ "${have_rich}" ]; then
    if [ "${install_version}" == "${control_version}" ]; then
      rich "Installed [green]RoonCommandLine[/] version: [yellow]${install_version}[/] ( current)" -p
    else
      rich "Installed [green]RoonCommandLine[/] version: [yellow]${install_version}[/]" -p
      rich "Available [green]RoonCommandLine[/] version: [yellow]${control_version}[/]" -p
    fi
  else
    printf "\nInstalled RoonCommandLine version: ${install_version}"
    if [ "${install_version}" == "${control_version}" ]; then
      printf " ( current)"
    else
      printf "\nAvailable RoonCommandLine version: ${control_version}"
    fi
  fi
  release_version=$(curl -fsSL "${fzf_url}" | grep ^version= | awk -F '=' '{ print $2 }')
  if [ "${have_fzf}" ]; then
    install_version=$(fzf --version | awk '{ print $1 }')
  else
    install_version="uninstalled"
  fi
  if [ "${have_rich}" ]; then
    if [ "${install_version}" == "${release_version}" ]; then
      rich "Installed [green]fzf[/] version: [yellow]${install_version}[/] ( current)" -p
    else
      rich "Installed [green]fzf[/] version: [yellow]${install_version}[/]" -p
      rich "Available [green]fzf[/] version: [yellow]${release_version}[/]" -p
    fi
  else
    printf "\nInstalled fzf version: ${install_version}"
    if [ "${install_version}" == "${release_version}" ]; then
      printf " ( current)\n"
    else
      printf "\nAvailable fzf version: ${release_version}\n"
    fi
  fi
  [ "${have_tui}" ] && {
    release_version=$(${ROON}/etc/install-roon-tui version)
    install_version=$(roon-tui --version | awk '{ print $2 }')
    if [ "${have_rich}" ]; then
      if [ "${install_version}" == "${release_version}" ]; then
        rich "Installed [green]roon-tui[/] version: [yellow]${install_version}[/] ( current)" -p
      else
        rich "Installed [green]roon-tui[/] version: [yellow]${install_version}[/]" -p
        rich "Available [green]roon-tui[/] version: [yellow]${release_version}[/]" -p
      fi
    else
      printf "\nInstalled roon-tui version: ${install_version}"
      if [ "${install_version}" == "${release_version}" ]; then
        printf " ( current)\n"
      else
        printf "\nAvailable roon-tui version: ${release_version}\n"
      fi
    fi
  }
}

show_about() {
  heading "About RoonCommandLine" "About"
  if [ "${have_rich}" ]; then
    rich "[red]RoonCommandLine[/] is an open source command line suite of utilities to" -p
    rich "control the [green]Roon[/] audio system using the [green]Python Roon API[/] facility." -p
    printf "\n"
    rich "[red]RoonCommandLine[/] enables automation of [green]Roon[/] actions and provides an" -p
    rich "additional layer of convenience. Scripted [green]Roon[/] actions enable quick" -p
    rich "and easy control and configuration of [green]Roon[/] in automated environments." -p
    printf "\n"
    rich "[red]RoonCommandLine[/] is written in [yellow]Bash[/] and [yellow]Python[/] by Ronald Record." -p
  else
    printf "'RoonCommandLine' is an open source command line suite of utilities to"
    printf "control the 'Roon' audio system using the 'Python Roon API' facility.\n"
    printf "'RoonCommandLine' enables automation of 'Roon' actions and provides an"
    printf "additional layer of convenience. Scripted 'Roon' actions enable quick"
    printf "and easy control and configuration of 'Roon' in automated environments.\n"
    printf "'RoonCommandLine' is written in 'Bash' and 'Python' by Ronald Record."
  fi
  show_versions
}

install_fzf() {
  printf "\nInstalling fzf\n"
  [ -f ${HOME}/.local/bin/fzf ] && {
    mv ${HOME}/.local/bin/fzf ${HOME}/.local/bin/fzf-bak$$
  }
  [ -d ${HOME}/.fzf ] && mv ${HOME}/.fzf ${HOME}/.fzf$$
  git clone --depth 1 https://github.com/junegunn/fzf.git \
    ${HOME}/.fzf > /dev/null 2>&1
  [ -f ${HOME}/.fzf/install ] && chmod 755 ${HOME}/.fzf/install
  [ -x ${HOME}/.fzf/install ] && ${HOME}/.fzf/install --all > /dev/null 2>&1
  [ -d ${HOME}/.fzf/bin ] && pathadd "${HOME}/.fzf/bin"
  if [ -f ${HOME}/.fzf/bin/fzf ]; then
    ln -s ${HOME}/.fzf/bin/fzf ${HOME}/.local/bin/fzf
    rm -f ${HOME}/.local/bin/fzf-bak$$
  else
    [ -f ${HOME}/.local/bin/fzf-bak$$ ] && {
      mv ${HOME}/.local/bin/fzf-bak$$ ${HOME}/.local/bin/fzf
    }
  fi
  [ "${have_fzf}" ] && use_fzf=1
}

upgrade_fzf() {
  [ -d ${HOME}/.fzf/.git ] && git -C ${HOME}/.fzf pull > /dev/null 2>&1
  if [ -d ${HOME}/.fzf ]; then
    if [ -f ${HOME}/.fzf/install ]; then
      chmod 755 ${HOME}/.fzf/install
      ${HOME}/.fzf/install --all > /dev/null 2>&1
    else
      install_fzf
    fi
  else
    [ "${have_brew}" ] && brew uninstall fzf > /dev/null 2>&1
    install_fzf
  fi
  [ -d ${HOME}/.fzf/bin ] && pathadd "${HOME}/.fzf/bin"
}

install_package() {
  pkg="$1"
  printf "\nInstalling ${pkg}\n"
  if [ "${darwin}" ]; then
    [ "${have_brew}" ] && brew install ${pkg} > /dev/null 2>&1
  else
    have_apt=$(type -p apt)
    if [ "${have_apt}" ]; then
      ${SUDO} apt install ${pkg} > /dev/null 2>&1
    else
      have_pac=$(type -p pacman)
      if [ "${have_pac}" ]; then
        ${SUDO} pacman -S ${pkg} > /dev/null 2>&1
      else
        have_apk=$(type -p apk)
        if [ "${have_apk}" ]; then
          ${SUDO} apk add ${pkg} > /dev/null 2>&1
        else
          have_dnf=$(type -p dnf)
          if [ "${have_dnf}" ]; then
            ${SUDO} dnf install ${pkg} > /dev/null 2>&1
          else
            have_xbps=$(type -p xbps-install)
            if [ "${have_xbps}" ]; then
              ${SUDO} xbps-install -S ${pkg} > /dev/null 2>&1
            else
              have_zypp=$(type -p zypper)
              [ "${have_zypp}" ] && {
                ${SUDO} zypper install ${pkg} > /dev/null 2>&1
              }
            fi
          fi
        fi
      fi
    fi
  fi
}
