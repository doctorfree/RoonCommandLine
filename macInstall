#!/bin/bash

PKG="RoonCommandLine"
TOP="/usr"
DESTDIR="${TOP}/local"
ROON="${DESTDIR}/Roon"
SRC=${HOME}/src
SRC_NAME="RoonCommandLine"
ROONAPI=${ROON}/api
ROONETC=${ROON}/etc
ROONCONF=${ROONETC}/pyroonconf
export SUDO=sudo

need_pip=
need_python=
pip3_inst=`type -p pip3`
if [ "${pip3_inst}" ]
then
    PIP="pip3"
else
    pip_inst=`type -p pip`
    if [ "${pip_inst}" ]
    then
        PIP="pip3"
    else
        need_pip=1
    fi
fi
python3_inst=`type -p python3`
if [ "${python3_inst}" ]
then
    PYTHON="python3"
else
    python_inst=`type -p python`
    if [ "${python3_inst}" ]
    then
        PYTHON="python"
    else
        need_python=1
    fi
fi
[ "${need_pip}" ] || [ "${need_python}" ] && {
    echo "RoonCommandLine requires Python 3 and Pip"
    echo "Install Python 3 and restart this installation"
    echo "See https://docs.python-guide.org/starting/install3/osx/"
    echo "for step by step instructions to install Homebrew and Python 3"
    echo "If you already have Homebrew, install Python 3 with:"
    echo "brew install python"
    exit 1
}

[ -f "${SRC}/${SRC_NAME}/VERSION" ] || {
    echo "$SRC/$SRC_NAME/VERSION does not exist. Exiting."
    exit 1
}

. "${SRC}/${SRC_NAME}/VERSION"
PKG_VER=${VERSION}

vercomp () {
    if [[ $1 == $2 ]]
    then
        echo "0"
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            echo "1"
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            echo "2"
        fi
    done
}

while true
do
  read -p "Install ${SRC_NAME} version ${PKG_VER} ? ('Y'/'N'): " yn
  case $yn in
      [Yy]*)
          break
          ;;
      [Nn]*)
          exit 0
          ;;
      * )
          echo "Please answer yes or no."
          ;;
  esac
done

export PATH=/usr/local/bin:/usr/bin:$PATH
have_python3=`type -p python3`

# Install the Python Roon API
if [ "${have_python3}" ]
then
    ${SUDO} python3 -m pip install roonapi
else
    ${SUDO} python -m pip install roonapi
fi

[ -d /usr/local ] || ${SUDO} mkdir /usr/local
[ -d /usr/local/bin ] || ${SUDO} mkdir /usr/local/bin
[ -d ${ROON} ] || ${SUDO} mkdir ${ROON}
[ -d ${DESTDIR}/share ] || ${SUDO} mkdir ${DESTDIR}/share
[ -d ${DESTDIR}/share/applications ] || ${SUDO} mkdir ${DESTDIR}/share/applications
[ -d ${DESTDIR}/share/doc ] || ${SUDO} mkdir ${DESTDIR}/share/doc
[ -d ${DESTDIR}/share/doc/${PKG} ] || ${SUDO} mkdir ${DESTDIR}/share/doc/${PKG}

for dir in bin etc api patches
do
    [ -d ${ROON}/${dir} ] && ${SUDO} rm -rf ${ROON}/${dir}
done

${SUDO} cp -a api ${ROON}/api
${SUDO} cp -a bin ${ROON}/bin
${SUDO} cp -a etc ${ROON}/etc
${SUDO} cp -a patches ${ROON}/patches

${SUDO} cp *.desktop "${DESTDIR}/share/applications"
${SUDO} cp AUTHORS ${DESTDIR}/share/doc/${PKG}/AUTHORS
${SUDO} cp LICENSE ${DESTDIR}/share/doc/${PKG}/copyright
${SUDO} cp CHANGELOG.md ${DESTDIR}/share/doc/${PKG}/changelog
${SUDO} cp README.md ${DESTDIR}/share/doc/${PKG}/README
${SUDO} gzip -9 ${DESTDIR}/share/doc/${PKG}/changelog

${SUDO} cp -a man ${DESTDIR}/share/man

[ -f .gitignore ] && {
    while read ignore
    do
        ${SUDO} rm -f ${ROON}/${ignore}
    done < .gitignore
}

${SUDO} chmod 644 ${ROON}/etc/* \
                  ${ROON}/api/* \
                  ${ROON}/patches/*.md ${ROON}/patches/*.patch \
                  ${ROON}/patches/roonapi/* \
                  ${ROON}/patches/roon-web-controller/* \
                  ${DESTDIR}/share/man/*/*
${SUDO} chmod 755 ${ROON}/bin/* \
                  ${ROON}/bin \
                  ${ROON}/etc \
                  ${ROON}/api \
                  ${ROON}/patches \
                  ${ROON}/patches/mk* \
                  ${ROON}/patches/roonapi \
                  ${ROON}/patches/roon-web-controller \
                  ${DESTDIR}/share/man \
                  ${DESTDIR}/share/man/*
${SUDO} chown -R root:wheel ${ROON}
${SUDO} chown -R root:wheel ${DESTDIR}

# Try to configure the roon script with the IP and username
IP=`ifconfig en0 |awk '/inet / {print $2; }'`
USER=`id -u -n`

cd /usr/local/bin
for command in ${ROON}/bin/*
do
    b=`basename ${command}`
    if [ -f ${b} ]
    then
        diff ${command} ${b} > /dev/null && {
            ${SUDO} rm -f ${b}
            ${SUDO} ln -s ${command} .
        }
    else
        ${SUDO} ln -s ${command} .
    fi
done

users=
numusers=0
for user in /Users/*
do
    [ "${user}" == "/Users/*" ] && continue
    [ -d ${user} ] && {
        base_user=`basename ${user}`
        users="${users} ${base_user}"
        numusers=`expr ${numusers} + 1`
    }
done

[ ${numusers} -gt 1 ] && {
  while true
  do
    read -p "Using ${USER} as the SSH user. 'Y' for OK, 'N' to select a different user: " yn
    case $yn in
      [Nn]*)
          PS3="${BOLD}Please enter SSH user (numeric or text): ${NORMAL}"
          options=(${users} "None")
          select opt in "${options[@]}"
          do
              case "$opt,$REPLY" in
                "None",*|*,"None")
                    break
                    ;;
                *)
                    [ -d /Users/${opt} ] && {
                        USER="${opt}"
                        break
                    }
                    printf "\nInvalid entry. Please try again"
                    printf "\nEnter either a number or text of one of the menu entries\n"
                    ;;
              esac
          done
          break
          ;;
      [Yy]*)
          break
          ;;
      * )
          echo "Please answer yes or no."
          ;;
    esac
  done
}

echo "Setting the Python Roon API server IP address to $IP"

echo "Enabling local access in ${ROONCONF}"
if [ -f ${ROONCONF} ]
then
    grep -v ^LOCAL= ${ROONCONF} > /tmp/roon$$
    echo "LOCAL=true" >> /tmp/roon$$
else
    echo "LOCAL=true" > /tmp/roon$$
fi
${SUDO} cp /tmp/roon$$ ${ROONCONF}
${SUDO} rm -f /tmp/roon$$

cat ${ROON}/bin/roon | sed -e "s/XX.X.X.XXX/$IP/" -e "s/SSH_USERNAME/$USER/" > /tmp/roon$$
${SUDO} cp ${ROON}/bin/roon ${ROON}/bin/roon.orig
${SUDO} cp /tmp/roon$$ ${ROON}/bin/roon
${SUDO} rm -f /tmp/roon$$

PYTHONUSERBASE=
# Check the global site directories
if [ "${have_python3}" ]
then
    SITES=($(python3 -c 'import site; print(site.getsitepackages())' | tr -d '[],'))
else
    SITES=($(python -c 'import site; print(site.getsitepackages())' | tr -d '[],'))
fi
for site in ${SITES[@]}
do
    site=`echo $site | sed -e "s/'//g"`
    site_sep=
    echo ${site} | grep site-packages > /dev/null && site_sep="site-packages"
    [ "${site_sep}" ] || site_sep="dist-packages"
    [ -d "${site}/roonapi" ] && {
        PYTHONUSERBASE=`echo ${site} | awk -F "/lib/" ' { print $1 } '`
        PYTHON_SITEDIR=`echo ${site} | awk -F "/${site_sep}" ' { print $1 } '`
        break
    }
done

if [ "${PYTHONUSERBASE}" ]
then
    if [ -f ${ROONCONF} ]
    then
        grep PYTHONUSERBASE ${ROONCONF} > /dev/null || {
            echo "export PYTHONUSERBASE=${PYTHONUSERBASE}" | ${SUDO} tee -a ${ROONCONF} > /dev/null
        }
    else
        echo "export PYTHONUSERBASE=${PYTHONUSERBASE}" | ${SUDO} tee ${ROONCONF} > /dev/null
    fi
    . ${ROONCONF}

    if [ "${have_python3}" ]
    then
      RVER=`python3 -m pip show roonapi | grep Version | awk -F ':' ' { print $2 } '`
    else
      RVER=`python -m pip show roonapi | grep Version | awk -F ':' ' { print $2 } '`
    fi
    # Remove leading and trailing spaces in RVER
    RVER="$(echo -e "${RVER}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    # Only patch Roonapi version 0.0.38 and earlier
    roon_api_cmp=`vercomp "${RVER}" "0.0.38"`
    if [ "${roon_api_cmp}" == "1" ]
    then
      # Mark it as having been patched
      grep -v ROONAPIPATCHED ${ROONCONF} > /tmp/roonconf$$
      echo "ROONAPIPATCHED=true" >> /tmp/roonconf$$
      cp /tmp/roonconf$$ ${ROONCONF}
      rm -f /tmp/roonconf$$
    else
      # Apply the Python Roon API patch if it has not already been applied
      if [ "${ROONAPIPATCHED}" = true ]
      then
        echo "Python Roon API already patched. Skipping patch."
      else
        # Locate the patch file
        if [ "${site_sep}" == "site-packages" ]
        then
            ROONAPI_PATCH=roonapi-listmedia-site.patch
        else
            ROONAPI_PATCH=roonapi-listmedia.patch
        fi
        patchfile=
        if [ -f ${ROON}/patches/${ROONAPI_PATCH} ]
        then
            patchfile=${ROON}/patches/${ROONAPI_PATCH}
        else
            echo "Cannot locate patch file ${ROONAPI_PATCH}"
            echo "Python Roon API patch not applied."
            echo "List commands will not function properly."
        fi
        [ "${patchfile}" ] && {
            patch_inst=`type -p patch`
            if [ "$patch_inst" ]
            then
                cd ${PYTHON_SITEDIR}
                ${SUDO} patch -b -p0 < ${patchfile}
                grep -v ROONAPIPATCHED ${ROONCONF} > /tmp/roonconf$$
                echo "ROONAPIPATCHED=true" >> /tmp/roonconf$$
                ${SUDO} cp /tmp/roonconf$$ ${ROONCONF}
                ${SUDO} rm -f /tmp/roonconf$$
            else
                echo "Cannot locate the patch utility. Either patch is not installed"
                echo "or it is not in your execution PATH."
                echo ""
                echo "Skipping the patch for the Python Roon API."
                echo "Listing of Roon library media will not work without this patch."
            fi
        }
      fi
    fi
else
    echo "Could not locate the roonapi Python module installation directory"
    echo "Python Roon API patch not applied."
    echo "List commands will not function properly."
fi

[ "${USER}" ] && {
    GROUP=`id -g -n ${USER}`
    ${SUDO} chown -R ${USER}:${GROUP} ${ROONETC}
}

echo ""
echo "In order to configure the Python Roon API we must set the IP address"
echo "of the Roon Core. Discovery will be used to determine the Roon Core IP."
echo "When prompted for authorization, go to a Roon Remote window and click"
echo "    Settings -> Extensions -> Enable"
echo "to authorize discovery"
echo ""

# Get and set the Roon Core IP address
${ROON}/bin/get_core_ip 2>&1 | tee /tmp/discover$$
CORE_IP=`cat /tmp/discover$$ | grep RoonCoreIP | awk -F '=' ' { print $2 } '`
CORE_IP="$(echo -e "${CORE_IP}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
CORE_PORT=`cat /tmp/discover$$ | grep RoonCorePort | awk -F '=' ' { print $2 } '`
CORE_PORT="$(echo -e "${CORE_PORT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
cat ${ROONETC}/roon_api.ini | sed -e "s/XX.X.X.XX/${CORE_IP}/" -e "s/__CORE_PORT__/${CORE_PORT}/" > /tmp/core$$
${SUDO} cp ${ROONETC}/roon_api.ini ${ROONETC}/roon_api.ini.orig
${SUDO} cp /tmp/core$$ ${ROONETC}/roon_api.ini
${SUDO} rm -f /tmp/core$$ /tmp/discover$$

# Get and set the default zone and initial zone groupings
defaultZone=
groupOne=
groupTwo=
groupRee=
groupFor=
zones=`${ROON}/bin/get_zones`
numZones=`echo "${zones}" | awk -F ',' ' { print NF } '`
[ ${numZones} -gt 0 ] && {
    defaultZone=`echo "${zones}" | awk -F ',' ' { print $1 } '`
}
[ ${numZones} -gt 2 ] && {
    groupOne=`echo "${zones}" | awk -F ',' ' { print $1 "," $2 } '`
    groupTwo=`echo "${zones}" | awk -F ',' ' { print $2 "," $NF } '`
}
[ ${numZones} -gt 3 ] && {
    groupRee=`echo "${zones}" | awk -F ',' ' { print $2 "," $3 "," $4 } '`
}
[ ${numZones} -gt 4 ] && {
    groupFor=`echo "${zones}" | awk -F ',' ' { print $(NF-3) "," $(NF-2) "," $(NF-1) "," $(NF) } '`
}
cat ${ROONETC}/roon_api.ini | \
        sed -e "s/__ALL_ZONES__/${zones}/" \
            -e "s/__GROUP_ONE__/${groupOne}/" \
            -e "s/__GROUP_TWO__/${groupTwo}/" \
            -e "s/__GROUP_REE__/${groupRee}/" \
            -e "s/__GROUP_FOR__/${groupFor}/" \
            -e "s/__DEF_ZONE__/${defaultZone}/" > /tmp/zones$$
${SUDO} cp /tmp/zones$$ ${ROONETC}/roon_api.ini
${SUDO} rm -f /tmp/zones$$

DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | awk -F '=' ' { print $2 } '`
# Remove leading and trailing spaces in DEFZONE
DEFZONE="$(echo -e "${DEFZONE}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
# Set ROON_ZONE in pyroonconf if not already set
if [ -f ${ROONCONF} ]
then
    grep ROON_ZONE ${ROONCONF} > /dev/null || {
        echo "ROON_ZONE=\"$DEFZONE\"" | ${SUDO} tee -a ${ROONCONF} > /dev/null
    }
else
    echo "ROON_ZONE=\"$DEFZONE\"" | ${SUDO} tee ${ROONCONF} > /dev/null
fi

echo ""
echo "Verify the 'server' and 'user' settings in the roon script are correct"
echo "and copy the 'roon' frontend shell script to a location in your execution"
echo "PATH on all systems from which you wish to control Roon via SSH"
echo ""
echo "Edit the Roon Command Line configuration settings at:"
echo "${ROONETC}/roon_api.ini"
echo "and verify the settings in the configuration file ${ROONCONF}"
