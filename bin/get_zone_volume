#!/bin/bash

ROON=/usr/local/Roon
ROONAPI=${ROON}/api
ROONETC=${ROON}/etc
ROONCONF=${ROONETC}/pyroonconf
SCRIPT=get_zone_attributes.py

[ -d ${ROONAPI} ] || exit 1

cd ${ROONAPI}

[ -f $SCRIPT ] || exit 2

# Get the zone if it is set
if [ -f ${ROONCONF} ]
then
    . ${ROONCONF}
else
    DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | awk -F '=' ' { print $2 } '`
    ${ROON}/bin/set_zone $DEFZONE
    . ${ROONCONF}
fi

# Parse the arguments to get the command and zone
while getopts "z:" flag; do
    case $flag in
        z)
            ROON_ZONE="$OPTARG"
            ;;
    esac
done

have_python3=`type -p python3`
have_jq=`type -p jq`
if [ "${have_python3}" ]
then
  if [ "${have_jq}" ]
  then
    python3 $SCRIPT -z "$ROON_ZONE" | \
      jq -r '.[]? | "\(.display_name): Volume = \(.volume.value), Min = \(.volume.min), Max = \(.volume.max)"'
  else
    # TODO: Parse returned JSON without jq
    python3 $SCRIPT -z "$ROON_ZONE"
  fi
else
  if [ "${have_jq}" ]
  then
    python $SCRIPT -z "$ROON_ZONE" | \
      jq -r '.[]? | "\(.display_name): Volume = \(.volume.value), Min = \(.volume.min), Max = \(.volume.max)"'
  else
    # TODO: Parse returned JSON without jq
    python $SCRIPT -z "$ROON_ZONE"
  fi
fi

