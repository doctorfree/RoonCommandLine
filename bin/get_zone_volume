#!/bin/bash
#
# shellcheck disable=SC1090,SC2220

ROON=/usr/local/Roon
ROONAPI=${ROON}/api
ROONETC=${ROON}/etc
ROONCONF=${ROONETC}/pyroonconf
SCRIPT=get_zone_attributes.py

[ -d ${ROONAPI} ] || exit 1

cd ${ROONAPI} || exit 1

[ -f $SCRIPT ] || exit 2

# Use a Python virtual environment
[ -f ${ROON}/venv/bin/activate ] && source ${ROON}/venv/bin/activate
[[ ":$PATH:" == *":/usr/local/Roon/venv/bin:"* ]] || {
  export PATH=/usr/local/Roon/venv/bin:${PATH}
}

DEFZONE=$(grep ^DefaultZone ${ROONETC}/roon_api.ini | awk -F '=' ' { print $2 } ')
# Remove leading and trailing spaces in DEFZONE
DEFZONE="$(echo -e "${DEFZONE}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

# Get the zone if it is set
if [ -f ${ROONCONF} ]; then
    . ${ROONCONF}
else
    ${ROON}/bin/set_zone "${DEFZONE}"
    . ${ROONCONF}
fi

grparg=
number=
ZONE=
# Parse the arguments to get the command and zone
while getopts "gnz:" flag; do
    case $flag in
        g)
            grparg="-g"
            ;;
        n)
            number=1
            ;;
        z)
            ZONE="$OPTARG"
            ;;
    esac
done

[ "${ZONE}" ] && {
    if [ "${ZONE}" == "default" ]; then
        ROON_ZONE="${DEFZONE}"
    else
        [ "${ZONE}" == "last" ] || ROON_ZONE="${ZONE}"
    fi
}
[ "${ROON_ZONE}" ] || ROON_ZONE="${DEFZONE}"

have_jq=$(type -p jq)
have_python3=$(type -p python3)

if [ "${have_python3}" ]; then
  PYTHON=python3
else
  PYTHON=python
fi
if [ "${have_jq}" ]; then
  if [ "${number}" ]; then
    ${PYTHON} $SCRIPT ${grparg} -z "$ROON_ZONE" | jq -r '.[].volume.value?'
  else
    ${PYTHON} $SCRIPT ${grparg} -z "$ROON_ZONE" | \
      jq -r '.[]? | "\(.display_name): Volume = \(.volume.value), Min = \(.volume.min), Max = \(.volume.max)"'
  fi
else
  # TODO: Parse returned JSON without jq
  ${PYTHON} $SCRIPT ${grparg} -z "$ROON_ZONE"
fi
