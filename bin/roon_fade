#!/bin/bash

ROON=/usr/local/Roon
ROONETC=${ROON}/etc
ROONFADE=${ROONETC}/roon_faded
ROONCONF=${ROONETC}/pyroonconf
POS_INT='^[1-9][0-9]*(,[1-9][0-9]*)*$'
FADE_ZONE=
LOG=

# Get the zone and fade settings
init_pyroon() {
  if [ -f ${ROONCONF} ]
  then
    . ${ROONCONF}
  else
    DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | \
        awk -F '=' ' { print $2 } '`
    ${ROON}/bin/set_zone $DEFZONE
    . ${ROONCONF}
  fi
}

usage() {
  printf "\nUsage: roon_fade [-iI] [-l] [-R] [-V] [-t seconds] [-uh] [-z zone] on|off"
  printf "\nWhere:"
  printf "\n\t-i enables fade in next track after fading out"
  printf "\n\t-I disables fade in, immediately restore volume after fading"
  printf "\n\t-l enables logging"
  printf "\n\t-R restores faded or modified volume to original levels"
  printf "\n\t-V updates fading restore volume to current volume levels"
  printf "\n\t\t(use 'roon_fade -V' after manually adjusting volume)"
  printf "\n\t-t 'seconds' sets the fade duration in seconds (default: 30)"
  printf "\n\t-z 'zone' sets the Roon zone in which to fade"
  printf "\n\t\tIf no zone is specified, the default zone is used\n"
  printf "\nAn argument of 'on' enables fading, 'off' disables fading"
  printf "\nWithout arguments or with '-u' or '-h' this usage message is displayed\n"
  if [ "${ROON_FADE}" = true ]
  then
    if [ "${FADE_ZONE}" ]
    then
      printf "\nRoon volume fading is currently enabled in zone ${FADE_ZONE}"
    else
      printf "\nRoon volume fading is currently enabled"
    fi
    printf "\nFade duration set to ${FADE_TIME} seconds"
    if [ "${FADE_IN}" = true ]
    then
      printf "\nFade back in is enabled"
    else
      printf "\nFade back in is disabled"
    fi
    printf "\nExecute 'roon_fade off' to disable\n\n"
  else
    printf "\nRoon volume fading is currently disabled"
    printf "\nExecute 'roon_fade on' to enable fading last ${FADE_TIME} seconds\n\n"
  fi
  exit 1
}

set_fade_zone() {
    grep -v FADE_ZONE ${ROONCONF} > /tmp/pyroon$$
    echo "FADE_ZONE=\"${FADE_ZONE}\"" >> /tmp/pyroon$$
    cp /tmp/pyroon$$ ${ROONCONF}
    rm -f /tmp/pyroon$$
}

set_roon_fade() {
    grep -v ROON_FADE ${ROONCONF} > /tmp/pyroon$$
    if [ "$1" == "on" ]
    then
      echo "ROON_FADE=true" >> /tmp/pyroon$$
    else
      echo "ROON_FADE=false" >> /tmp/pyroon$$
    fi
    cp /tmp/pyroon$$ ${ROONCONF}
    rm -f /tmp/pyroon$$
}

set_fade_in() {
    grep -v FADE_IN ${ROONCONF} > /tmp/pyroon$$
    if [ "$1" == "on" ]
    then
      echo "FADE_IN=true" >> /tmp/pyroon$$
    else
      echo "FADE_IN=false" >> /tmp/pyroon$$
    fi
    cp /tmp/pyroon$$ ${ROONCONF}
    rm -f /tmp/pyroon$$
}

set_fade_time() {
    grep -v FADE_TIME ${ROONCONF} > /tmp/pyroon$$
    echo "FADE_TIME=$1" >> /tmp/pyroon$$
    cp /tmp/pyroon$$ ${ROONCONF}
    rm -f /tmp/pyroon$$
}

init_pyroon

fadein=
fadetime=
fadeinit=
restore=
# Parse the arguments to get the command and zone
while getopts "iIlRt:Vz:hu" flag; do
    case $flag in
        i)
            [ "${FADE_IN}" = true ] || set_fade_in on
            fadein=1
            ;;
        I)
            [ "${FADE_IN}" = false ] || set_fade_in off
            fadein=1
            ;;
        l)
            LOG="-l"
            ;;
        R)
            ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
              echo "Restoring volume levels"
              grep -v RESTORE_VOLUME ${ROONCONF} > /tmp/pyroon$$
              echo "RESTORE_VOLUME=1" >> /tmp/pyroon$$
              cp /tmp/pyroon$$ ${ROONCONF}
              rm -f /tmp/pyroon$$
              restore=1
            }
            [ "${restore}" ] || {
              echo "${ROONFADE} does not appear to be running"
              echo "Volume levels must be restored manually"
            }
            ;;
        t)
            fadetime="$OPTARG"
            [ "${fadetime}" == "default" ] && fadetime=30
            if [[ ${fadetime} =~ ${POS_INT} ]]
            then
                if [ ${fadetime} -eq ${FADE_TIME} ]
                then
                    echo "Fade duration already set to ${fadetime} seconds"
                else
                    echo "Setting fade duration to ${fadetime} seconds"
                    set_fade_time ${fadetime}
                fi
            else
                echo "${fadetime} is not a positive integer. Ignoring."
            fi
            ;;
        V)
            ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
              echo "Updating restored volume levels for fading"
              grep -v FADE_INIT ${ROONCONF} > /tmp/pyroon$$
              echo "FADE_INIT=1" >> /tmp/pyroon$$
              cp /tmp/pyroon$$ ${ROONCONF}
              rm -f /tmp/pyroon$$
              fadeinit=1
            }
            [ "${fadeinit}" ] || {
              echo "${ROONFADE} does not appear to be running"
              echo "Volume levels must be updated by stopping and restarting fade"
            }
            ;;
        z)
            FADE_ZONE="$OPTARG"
            ;;
        h|u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "${FADE_ZONE}" ] || FADE_ZONE="${ROON_ZONE}"

if [ "$1" ]
then
    argument=`echo "$1" | tr '[:upper:]' '[:lower:]'`
    if [ "${argument}" == "on" ]
    then
        ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
            printf "\n${ROONFADE} appears to be running."
            printf "\nOnly one instance of 'roon_faded' is currently supported."
            printf "\nThe current process can be exited with 'roon_fade off'"
            printf "\nor by answering 'y' below.\n\n"
            while true
            do
              read -p "Exit 'roon_faded' and start a new one ? (y/n) " yn
              case $yn in
                [Yy]* )
                      roon_fade off
                      init_pyroon
                      break
                      ;;
                [Nn]* )
                      printf "\nRoon fading daemon startup aborted."
                      printf "\nExiting.\n\n"
                      exit 1
                      ;;
                    * ) echo "Please answer yes or no."
                      ;;
              esac
            done
        }
        if [ -x ${ROONFADE} ]
        then
            [ "${ROON_FADE}" = true ] || set_roon_fade on
            [ "${FADE_IN}" ] || set_fade_in on
            [ "${FADE_TIME}" ] || set_fade_time 30
            set_fade_zone
            echo "Starting Roon fade daemon ${ROONFADE}"
            [ "${LOG}" ] && echo "Logging in ${ROONETC}/faded_log.txt"
            ${ROONFADE} ${LOG} -z "${FADE_ZONE}" > /dev/null 2>&1 &
        else
            echo "Roon fade daemon ${ROONFADE} not found or not executable"
        fi
    else
        if [ "${argument}" == "off" ]
        then
            [ "${ROON_FADE}" = true ] && {
                set_roon_fade off
                printf "\nRoon fade disabled in ${ROONCONF}"
                printf "\nWaiting for ${ROONFADE} to exit ..."
                while true
                do
                  running=
                  ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
                    running=1
                    printf "."
                    sleep 2
                  }
                  [ "${running}" ] || {
                    printf " done\n"
                    break
                  }
                done
            }
        else
            usage
        fi
    fi
else
    [ "${fadeinit}" ] || [ "${restore}" ] || \
    [ "${fadetime}" ] || [ "${fadein}" ] || usage
fi
exit 0
