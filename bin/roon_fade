#!/bin/bash

ROON=/usr/local/Roon
ROONETC=${ROON}/etc
ROONFADE=${ROONETC}/roon_faded
ROONCONF=${ROONETC}/pyroonconf
POS_INT='^[1-9][0-9]*(,[1-9][0-9]*)*$'
LOG=

# Get the zone if it is set
if [ -f ${ROONCONF} ]
then
    . ${ROONCONF}
else
    DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | \
        awk -F '=' ' { print $2 } '`
    ${ROON}/bin/set_zone $DEFZONE
    . ${ROONCONF}
fi

usage() {
  printf "\nUsage: roon_fade [-l] [-R] [-t seconds] [-uh] [-z zone] on|off"
  printf "\nWhere:"
  printf "\n\t-l enables logging"
  printf "\n\t-R restores faded or modified volume to original levels"
  printf "\n\t-t 'seconds' sets the fade duration in seconds (default: 30)"
  printf "\n\t-z 'zone' sets the Roon zone in which to fade"
  printf "\n\t\tIf no zone is specified, the default zone is used\n"
  printf "\nAn argument of 'on' enables fading, 'off' disables fading"
  printf "\nWithout arguments or with '-u' or '-h' this usage message is displayed\n"
  if [ "${ROON_FADE}" ]
  then
    printf "\nRoon volume fading is currently enabled, fading last ${FADE_TIME} seconds"
    printf "\nExecute 'roon_fade off' to disable\n\n"
  else
    printf "\nRoon volume fading is currently disabled"
    printf "\nExecute 'roon_fade on' to enable fading last ${FADE_TIME} seconds\n\n"
  fi
  exit 1
}

set_roon_fade() {
    grep -v ROON_FADE ${ROONCONF} > /tmp/pyroon$$
    if [ "$1" == "on" ]
    then
      echo "ROON_FADE=true" >> /tmp/pyroon$$
    else
      echo "ROON_FADE=" >> /tmp/pyroon$$
    fi
    cp /tmp/pyroon$$ ${ROONCONF}
    rm -f /tmp/pyroon$$
}

set_fade_time() {
    grep -v FADE_TIME ${ROONCONF} > /tmp/pyroon$$
    echo "FADE_TIME=$1" >> /tmp/pyroon$$
    cp /tmp/pyroon$$ ${ROONCONF}
    rm -f /tmp/pyroon$$
}

fadetime=
restore=
# Parse the arguments to get the command and zone
while getopts "lRt:z:hu" flag; do
    case $flag in
        l)
            LOG="-l"
            ;;
        R)
            ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
              echo "Restoring volume levels"
              grep -v RESTORE_VOLUME ${ROONCONF} > /tmp/pyroon$$
              echo "RESTORE_VOLUME=1" >> /tmp/pyroon$$
              cp /tmp/pyroon$$ ${ROONCONF}
              rm -f /tmp/pyroon$$
              restore=1
            }
            [ "${restore}" ] || {
              echo "${ROONFADE} does not appear to be running"
              echo "Volume levels must be restored manually"
            }
            ;;
        t)
            fadetime="$OPTARG"
            [ "${fadetime}" == "default" ] && fadetime=30
            if [[ ${fadetime} =~ ${POS_INT} ]]
            then
                if [ ${fadetime} -eq ${FADE_TIME} ]
                then
                    echo "Fade duration already set to ${fadetime} seconds"
                else
                    echo "Setting fade duration to ${fadetime} seconds"
                    set_fade_time ${fadetime}
                fi
            else
                echo "${fadetime} is not a positive integer. Ignoring."
            fi
            ;;
        z)
            ROON_ZONE="$OPTARG"
            ;;
        h|u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

if [ "$1" ]
then
    argument=`echo "$1" | tr '[:upper:]' '[:lower:]'`
    if [ "${argument}" == "on" ]
    then
        ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
            echo "${ROONFADE} appears to be running."
            echo "Disable and re-enable to start a new process."
            echo "Exiting"
            exit 1
        }
        if [ -x ${ROONFADE} ]
        then
            [ "${ROON_FADE}" ] || set_roon_fade on
            [ "${FADE_TIME}" ] || set_fade_time 30
            echo "Starting Roon fade daemon ${ROONFADE}"
            [ "${LOG}" ] && echo "Logging in ${ROONETC}/faded_log.txt"
            ${ROONFADE} ${LOG} -z "${ROON_ZONE}" > /dev/null 2>&1 &
        else
            echo "Roon fade daemon ${ROONFADE} not found or not executable"
        fi
    else
        if [ "${argument}" == "off" ]
        then
            [ "${ROON_FADE}" ] && {
                set_roon_fade off
                printf "\nRoon fade disabled in ${ROONCONF}"
                printf "\nWaiting for ${ROONFADE} to exit ..."
                while true
                do
                  running=
                  ps -ef | grep ${ROONFADE} | grep -v grep > /dev/null && {
                    running=1
                    printf "."
                    sleep 2
                  }
                  [ "${running}" ] || {
                    printf " done\n"
                    break
                  }
                done
            }
        else
            usage
        fi
    fi
else
    [ "${restore}" ] || [ "${fadetime}" ] || usage
fi
exit 0
