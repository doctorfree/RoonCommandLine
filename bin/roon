#!/bin/bash
#
# roon - frontend script to issue commands to Roon via the Python Roon API
#
#  Copyright 2021-2022, Ronald Joe Record
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# shellcheck disable=SC1090,SC2001,SC2002,SC2016,SC2006,SC2086,SC2181,SC2129,SC2059,SC2076,SC2029,SC2207
#
# Edit these two settings if necessary
#
#   Both of these should have been set correctly during
#   installation of the RoonCommandLine package. Manual
#   setting of these variables is uncommon and only necessary
#   if the Python Roon API is installed on another system
#
#   The IP address of the system on which the Python Roon API is installed
#
server="XX.X.X.XXX"
#
#   The username with public key authorized SSH access to the system on
#   which the Python Roon API is installed
#
user="SSH_USERNAME"

album=
artist=
composer=
comm=
albumlist=
artistlist=
artalbumlist=
arttracklist=
composerlist=
comalbumlist=
dest_zone=
from_zone=
exalbum=
exartist=
genrelist=
genartistlist=
genalbumlist=
playlistlist=
radiolist=
taglist=
playlist=
radio=
relative=
search=
setdefs=
showusage=1
showexamples=1
tag=
track=
volume=
zone=
zonegroup=
zonelist=
have_rich=$(type -p rich)

usage() {
  [ "${showusage}" ] && {
    if [ "${have_rich}" ]; then
      rich "[bold]Usage:[/] [bold italic green]roon[/] [cyan]-A[/] [yellow]album[/] [cyan]-a[/] [yellow]artist[/] [cyan]-C[/] [yellow]composer[/] [cyan]-D[/] [yellow]destination zone[/] [cyan]-n -N -O[/]" --print
      rich "    [cyan]-F[/] [yellow]\[from zone][/] [cyan]-f[/] [yellow]\[on|onlog|off|status][/] [cyan]-g[/] [yellow]genre[/] [cyan]-G[/] [yellow]zone_group[/] [cyan]-i[/]" --print
      rich "    [cyan]-I -l[/] [yellow]\[albums|artists|artalbums|arttracks|composers|comalbums|[/]" --print
      rich "        [yellow]genres|genalbums|genartists|playlists|playtracks|tags|zones][/]" --print
      rich "    [cyan]-c[/] [yellow]\[group|ungroup|play|play_all|pause|pause_all|stop|stop_all|[/]" --print
      rich "        [yellow]next|previous|shuffle|unshuffle|repeat|unrepeat|mute|mute_all][/]" --print
      rich "    [cyan]-s[/] [yellow]search[/] [cyan]-p[/] [yellow]playlist[/] [cyan]-T[/] [yellow]track[/] [cyan]-t[/] [yellow]tag[/] [cyan]-z[/] [yellow]zone[/] [cyan]-L[/] [cyan]-S[/] [cyan]-r[/] [yellow]radio[/]" --print
      rich "    [cyan]-X[/] [yellow]ex_album[/] [cyan]-x[/] [yellow]ex_artist[/] [cyan]\[-EuU][/]" --print
      rich "[bold]Where:[/]" --print
      rich "    [cyan]-A[/] [yellow]album[/] selects an album to play" --print
      rich "    [cyan]-a[/] [yellow]artist[/] selects an artist to list/play" --print
      rich "    [cyan]-C[/] [yellow]composer[/] selects a composer to play" --print
      rich "    [cyan]-D[/] [yellow]destination zone[/] specifies the zone to transfer current queue to" --print
      rich "    [cyan]-F[/] [yellow]from zone[/] specifies the zone to transfer from (default: last played)" --print
      rich "    [cyan]-g[/] [yellow]genre[/] selects a genre to list/play" --print
      rich "    [cyan]-i[/] displays zone information (combine with '[cyan]-z[/] [yellow]zone[/]' for extended" --print
      rich "        info on a specified zone, otherwise display info on all zones)" --print
      rich "    [cyan]-I[/] installs the [green]roon-tui[/] terminal user interface for Roon and exits" --print
      rich "    [cyan]-f[/] [yellow]\[on|onlog|off|status][/] enables/disables fading/logging in specified zone" --print
      rich "        '[yellow]on[/]' enables fading, '[yellow]onlog[/]' fading and logging, '[yellow]off[/]' disables fading" --print
      rich "        (combine with '[cyan]-z[/] [yellow]zone[/]' for 'fading' in that zone)" --print
      rich "    [cyan]-n[/] displays 'now playing' information for zones actively playing" --print
      rich "    [cyan]-N[/] displays 'now playing' information for all zones" --print
      rich "        (combine with '[cyan]-z[/] [yellow]zone[/]' for 'now playing' in only that zone)" --print
      rich "    [cyan]-O[/] opens [green]roon-tui[/] terminal user interface for Roon if available" --print
      rich "    [cyan]-p[/] [yellow]playlist[/] selects a playlist to play" --print
      rich "    [cyan]-G[/] [yellow]zone_group[/] specifies a zone grouping specified in roon_api.ini" --print
      rich "    [cyan]-L[/] setup roon to execute local commands rather than remote via SSH" --print
      rich "    [cyan]-S[/] Set Roon defaults in roon_api.ini" --print
      rich "    [cyan]-l[/] [yellow]\[albums|artists|artalbums|arttracks|composers|comalbums|[/]" --print
      rich "        [yellow]genres|genalbums|genartists|playlists|playtracks|tags|zones][/]" --print
      rich "            indicates list [italic]albums, artists, albums by artist,[/]" --print
      rich "            [italic]composers, albums by composers, genres, albums in genre,[/]" --print
      rich "            [italic]artists in genre, playlists, tags,[/] or Roon [italic]zones[/]" --print
      rich "    [cyan]-r[/] [yellow]radio[/] selects a live radio stream to play" --print
      rich "    [cyan]-s[/] [yellow]search[/] specifies a term to search for in the lists retrieved with [cyan]-l[/]" --print
      rich "    [cyan]-T[/] [yellow]track[/] specifies a track to play" --print
      rich "    [cyan]-t[/] [yellow]tag[/] selects an tag to play" --print
      rich "    [cyan]-z[/] [yellow]zone[/] selects the Roon Zone in which to play" --print
      rich "    [cyan]-c[/] [yellow]\[group|ungroup|play|play_all|pause|pause_all|playpause|stop|stop_all|[/]" --print
      rich "        [yellow]next|previous|shuffle|unshuffle|repeat|unrepeat|mute|mute_all][/]" --print
      rich "            issues the command in the selected zone" --print
      rich "            '[italic green]roon -c mute[/]' toggles the zone's muted or unmuted state" --print
      rich "            '[italic green]roon -c mute_all[/]' toggles all zones' muted or unmuted state" --print
      rich "            '[italic green]roon -c pause_all[/]' pauses playback in all zones" --print
      rich "            '[italic green]roon -c play_all[/]' begins playback in all zones" --print
      rich "            '[italic green]roon -c stop_all[/]' stops playback in all zones and releases devices" --print
      rich "            '[italic green]roon -c shuffle[/]' enables the zone's shuffled setting" --print
      rich "            '[italic green]roon -c unshuffle[/]' disables the zone's shuffled setting" --print
      rich "            '[italic green]roon -c repeat[/]' enables the zone's looping setting" --print
      rich "            '[italic green]roon -c unrepeat[/]' disables the zone's looping setting" --print
      rich "    [cyan]-v[/] [yellow]volume[/] sets the volume level in the selected zone" --print
      rich "        The volume argument has the format [yellow]\[g:]\[r:]\[s:]num[/]" --print
      rich "        Where '[yellow]g[/]' indicates set volume for all zones in the group" --print
      rich "        '[yellow]r[/]' specifies use relative method volume setting" --print
      rich "        '[yellow]s[/]' specifies use relative_step method volume setting" --print
      rich "        '[yellow]num[/]' can be absolute, relative, and negative or positive" --print
      rich "    [cyan]-X[/] [yellow]ex_album[/] specifies a string to exclude from album/genre names" --print
      rich "    [cyan]-x[/] [yellow]ex_artist[/] specifies a string to exclude from artist/composer/playlist names" --print
      rich "    [cyan]-u[/] displays a full usage message with examples" --print
      rich "    [cyan]-U[/] displays a usage message without examples" --print
      rich "    [cyan]-E[/] displays examples with no usage message" --print
      rich "Combine '[cyan]-a[/] [yellow]artist[/]' and '[cyan]-A[/] [yellow]album[/]' to play an album by a specified artist" --print
      rich "Combine '[cyan]-a[/] [yellow]artist[/]' and '[cyan]-T[/] [yellow]track[/]' to play a track by a specified artist" --print
      rich "Combine '[cyan]-a[/] [yellow]artist[/]' or '[cyan]-A[/] [yellow]album[/]' with '[cyan]-g[/] [yellow]genre[/]' to play an artist or album in a specified genre" --print
      printf "\n"
      rich "Special search term [bold italic magenta]__all__[/] matches all entries" --print
      rich "Special name [bold italic green]default[/] plays the default setting in roon_api.ini" --print
      printf "\n"
    else
      printf "\nUsage: roon -A album -a artist -C composer -D destination zone -n -N -O"
      printf "\n\t-F [from zone] -f [on|onlog|off|status] -g genre -G zone_group -i"
      printf "\n\t-I -l [albums|artists|artalbums|arttracks|composers|comalbums|"
      printf "\n\t    genres|genalbums|genartists|playlists|playtracks|tags|zones]"
      printf "\n\t-c [group|ungroup|play|play_all|pause|pause_all|stop|stop_all|"
      printf "\n\t    next|previous|shuffle|unshuffle|repeat|unrepeat|mute|mute_all]"
      printf "\n\t-s search -p playlist -T track -t tag -z zone -L -S -r radio"
      printf "\n\t-X ex_album -x ex_artist [-EuU]"
      printf "\nWhere:\n\t-A album selects an album to play"
      printf "\n\t-a artist selects an artist to list/play"
      printf "\n\t-C composer selects a composer to play"
      printf "\n\t-D 'destination zone' specifies the zone to transfer current queue to"
      printf "\n\t-F 'from zone' specifies the zone to transfer from (default: last played)"
      printf "\n\t-g genre selects a genre to list/play"
      printf "\n\t-i displays zone information (combine with '-z zone' for extended"
      printf "\n\t\tinfo on a specified zone, otherwise display info on all zones)"
      printf "\n\t-I installs the roon-tui terminal user interface for Roon and exits"
      printf "\n\t-f [on|onlog|off|status] enables/disables fading/logging in specified zone"
      printf "\n\t\t'on' enables fading, 'onlog' fading and logging, 'off' disables fading"
      printf "\n\t\t(combine with '-z zone' for 'fading' in that zone)"
      printf "\n\t-n displays 'now playing' information for zones actively playing"
      printf "\n\t-N displays 'now playing' information for all zones"
      printf "\n\t\t(combine with '-z zone' for 'now playing' in only that zone)"
      printf "\n\t-O opens 'roon-tui' terminal user interface for Roon if available"
      printf "\n\t-p playlist selects a playlist to play"
      printf "\n\t-G zone_group specifies a zone grouping specified in roon_api.ini"
      printf "\n\t-L setup roon to execute local commands rather than remote via SSH"
      printf "\n\t-S Set Roon defaults in roon_api.ini"
      printf "\n\t-l [albums|artists|artalbums|arttracks|composers|comalbums|"
      printf "\n\t    genres|genalbums|genartists|playlists|playtracks|tags|zones]"
      printf "\n\t        indicates list albums, artists, albums by artist,"
      printf "\n\t        composers, albums by composers, genres, albums in genre,"
      printf "\n\t        artists in genre, playlists, tags, or Roon zones"
      printf "\n\t-r radio selects a live radio stream to play"
      printf "\n\t-s search specifies a term to search for in the lists retrieved with -l"
      printf "\n\t-T track specifies a track to play"
      printf "\n\t-t tag selects an tag to play"
      printf "\n\t-z zone selects the Roon Zone in which to play"
      printf "\n\t-c [group|ungroup|play|play_all|pause|pause_all|playpause|stop|stop_all|"
      printf "\n\t    next|previous|shuffle|unshuffle|repeat|unrepeat|mute|mute_all]"
      printf "\n\t        issues the command in the selected zone"
      printf "\n\t        'mute' toggles the zone's muted or unmuted state"
      printf "\n\t        'mute_all' toggles all zones' muted or unmuted state"
      printf "\n\t        'pause_all' pauses playback in all zones"
      printf "\n\t        'play_all' begins playback in all zones"
      printf "\n\t        'stop_all' stops playback in all zones and releases devices"
      printf "\n\t        'shuffle' enables the zone's shuffled setting"
      printf "\n\t        'unshuffle' disables the zone's shuffled setting"
      printf "\n\t        'repeat' enables the zone's looping setting"
      printf "\n\t        'repeat' disables the zone's looping setting"
      printf "\n\t-v volume sets the volume level in the selected zone"
      printf "\n\t\tThe volume argument has the format [g:][r:][s:]num"
      printf "\n\t\tWhere 'g' indicates set volume for all zones in the group"
      printf "\n\t\t'r' specifies use relative method volume setting"
      printf "\n\t\t's' specifies use relative_step method volume setting"
      printf "\n\t\t'num' can be absolute, relative, and negative or positive"
      printf "\n\t-X ex_album specifies a string to exclude from album/genre names"
      printf "\n\t-x ex_artist specifies a string to exclude from artist/composer/playlist names"
      printf "\n\t-u displays a full usage message with examples"
      printf "\n\t-U displays a usage message without examples"
      printf "\n\t-E displays examples with no usage message"
      printf "\nCombine '-a artist' and '-A album' to play an album by a specified artist"
      printf "\nCombine '-a artist' and '-T track' to play a track by a specified artist"
      printf "\nCombine '-a artist' or '-A album' with '-g genre' to play an artist or album in a specified genre\n"
      printf "\nSpecial search term '__all__' matches all entries"
      printf "\nSpecial name 'default' plays the default setting in roon_api.ini\n"
    fi
  }
  [ "${showexamples}" ] && {
    if [ "${have_rich}" ]; then
      rich "[bold]Example invocations[/]" --print
      rich "    [magenta]Play artist:[/]" --print
      rich "        [bold italic green]roon -a \"Deep Purple\"[/]" --print
      rich "    [magenta]Play album by artist:[/]" --print
      rich "        [bold italic green]roon -a \"Deep Purple\" -A Burn[/]" --print
      rich "    [magenta]Play track by artist:[/]" --print
      rich "        [bold italic green]roon -a \"Aretha Franklin\" -T Think[/]" --print
      rich "    [magenta]Play artist in specified zone:[/]" --print
      rich "        [bold italic green]roon -a \"Jethro Tull\" -z \"Mac Pro DAC\"[/]" --print
      rich "    [magenta]Play genre:[/]" --print
      rich "        [bold italic green]roon -g Classical[/]" --print
      rich "    [magenta]Play default live radio:[/]" --print
      rich "        [bold italic green]roon -r default[/]" --print
      rich "    [magenta]Play playlist:[/]" --print
      rich "        [bold italic green]roon -p \"Bowie Favs\"[/]" --print
      rich "    [magenta]Play next track:[/]" --print
      rich "        [bold italic green]roon -c next[/]" --print
      rich "    [magenta]Stop play in specified zone:[/]" --print
      rich "        [bold italic green]roon -c stop -z Kitchen[/]" --print
      rich "    [magenta]Mute/Unmute a specified zone:[/]" --print
      rich "        [bold italic green]roon -c mute -z \"Mac Pro DAC\"[/]" --print
      rich "    [magenta]Mute/Unmute all zones:[/]" --print
      rich "        [bold italic green]roon -c mute_all[/]" --print
      rich "    [magenta]List all playlists containing the string 'Best':[/]" --print
      rich "        [bold italic green]roon -l playlists -s Best[/]" --print
      rich "    [magenta]List albums by artist:[/]" --print
      rich "        [bold italic green]roon -l artalbums -a \"Deep Purple\"[/]" --print
      rich "    [magenta]List artists containing the string 'Will' in the 'Country' genre:[/]" --print
      rich "        [bold italic green]roon -l genartists -a Will -g Country[/]" --print
      rich "    [magenta]List albums containing the string 'Magic' in the 'Rock' genre:[/]" --print
      rich "        [bold italic green]roon -l genalbums -A Magic -g Rock[/]" --print
      rich "    [magenta]Play artist containing the string 'Willie' in the 'Country' genre:[/]" --print
      rich "        [bold italic green]roon -a Willie -g Country[/]" --print
      rich "    [magenta]Play album containing the string 'Magic' in the 'Rock' genre:[/]" --print
      rich "        [bold italic green]roon -A Magic -g Rock[/]" --print
      rich "    [magenta]Group the zones listed in roon_api.ini Group_foobar:[/]" --print
      rich "        [bold italic green]roon -G foobar -c group[/]" --print
      rich "    [magenta]Set the volume level to 50 in the currently active zone[/]" --print
      rich "        [bold italic green]roon -v 50[/]" --print
      rich "    [magenta]Decrease the volume level by 10 in the currently active zone[/]" --print
      rich "        [bold italic green]roon -v r:-10[/]" --print
      rich "    [magenta]Set the volume level to 40 in all zones grouped with the zone named 'Mac Pro DAC'[/]" --print
      rich "        [bold italic green]roon -v g:40 -z 'Mac Pro DAC'[/]" --print
      rich "    [magenta]Increase the volume level by 20 in all zones grouped with the zone named 'Mac Pro DAC'[/]" --print
      rich "        [bold italic green]roon -v g:r:20 -z 'Mac Pro DAC'[/]" --print
      rich "    [magenta]Get info on all Roon zones[/]" --print
      rich "        [bold italic green]roon -i[/]" --print
      rich "    [magenta]Get extended info on Roon zone named 'Mac Pro DAC'[/]" --print
      rich "        [bold italic green]roon -i -z 'Mac Pro DAC'[/]" --print
      rich "    [magenta]Get now playing info on all zones regardless of state[/]" --print
      rich "        [bold italic green]roon -N[/]" --print
      rich "    [magenta]Get now playing info on all zones actively playing[/]" --print
      rich "        [bold italic green]roon -n[/]" --print
      rich "    [magenta]Get now playing info on Roon zone named 'Mac Pro DAC'[/]" --print
      rich "        [bold italic green]roon -n -z 'Mac Pro DAC'[/]" --print
      rich "    [magenta]Enable volume fading in default Roon zone[/]" --print
      rich "        [bold italic green]roon -f on[/]" --print
      rich "    [magenta]Disable volume fading in default Roon zone[/]" --print
      rich "        [bold italic green]roon -f off[/]" --print
      rich "    [bold]NOTE:[/] [italic]Use quotes to specify media names which contain spaces.[/]" --print
      rich "    For example, to [magenta]play the album 'Love Bomb':[/]" --print
      rich "        [bold italic green]roon -A \"Love Bomb\"[/]" --print
      printf "\n"
    else
      printf "\nExample invocations"
      printf "\n\tPlay artist:"
      printf "\n\t\troon -a \"Deep Purple\""
      printf "\n\tPlay album by artist:"
      printf "\n\t\troon -a \"Deep Purple\" -A Burn"
      printf "\n\tPlay track by artist:"
      printf "\n\t\troon -a \"Aretha Franklin\" -T Think"
      printf "\n\tPlay artist in specified zone:"
      printf "\n\t\troon -a \"Jethro Tull\" -z \"Mac Pro DAC\""
      printf "\n\tPlay genre:"
      printf "\n\t\troon -g Classical"
      printf "\n\tPlay default live radio:"
      printf "\n\t\troon -r default"
      printf "\n\tPlay playlist:"
      printf "\n\t\troon -p \"Bowie Favs\""
      printf "\n\tPlay next track:"
      printf "\n\t\troon -c next"
      printf "\n\tStop play in specified zone:"
      printf "\n\t\troon -c stop -z Kitchen"
      printf "\n\tMute/Unmute a specified zone:"
      printf "\n\t\troon -c mute -z \"Mac Pro DAC\""
      printf "\n\tMute/Unmute all zones:"
      printf "\n\t\troon -c mute_all"
      printf "\n\tList all playlists containing the string 'Best':"
      printf "\n\t\troon -l playlists -s Best"
      printf "\n\tList albums by artist:"
      printf "\n\t\troon -l artalbums -a \"Deep Purple\""
      printf "\n\tList artists containing the string 'Will' in the 'Country' genre:"
      printf "\n\t\troon -l genartists -a Will -g Country"
      printf "\n\tList albums containing the string 'Magic' in the 'Rock' genre:"
      printf "\n\t\troon -l genalbums -A Magic -g Rock"
      printf "\n\tPlay artist containing the string 'Willie' in the 'Country' genre:"
      printf "\n\t\troon -a Willie -g Country"
      printf "\n\tPlay album containing the string 'Magic' in the 'Rock' genre:"
      printf "\n\t\troon -A Magic -g Rock"
      printf "\n\tGroup the zones listed in roon_api.ini Group_foobar:"
      printf "\n\t\troon -G foobar -c group"
      printf "\n\tSet the volume level to 50 in the currently active zone"
      printf "\n\t\troon -v 50"
      printf "\n\tDecrease the volume level by 10 in the currently active zone"
      printf "\n\t\troon -v r:-10"
      printf "\n\tSet the volume level to 40 in all zones grouped with the zone named 'Mac Pro DAC'"
      printf "\n\t\troon -v g:40 -z 'Mac Pro DAC'"
      printf "\n\tIncrease the volume level by 20 in all zones grouped with the zone named 'Mac Pro DAC'"
      printf "\n\t\troon -v g:r:20 -z 'Mac Pro DAC'"
      printf "\n\tGet info on all Roon zones"
      printf "\n\t\troon -i"
      printf "\n\tGet extended info on Roon zone named 'Mac Pro DAC'"
      printf "\n\t\troon -i -z 'Mac Pro DAC'"
      printf "\n\tGet now playing info on all zones regardless of state"
      printf "\n\t\troon -N"
      printf "\n\tGet now playing info on all zones actively playing"
      printf "\n\t\troon -n"
      printf "\n\tGet now playing info on Roon zone named 'Mac Pro DAC'"
      printf "\n\t\troon -n -z 'Mac Pro DAC'"
      printf "\n\tEnable volume fading in default Roon zone"
      printf "\n\t\troon -f on"
      printf "\n\tDisable volume fading in default Roon zone"
      printf "\n\t\troon -f off"
      printf "\n\tNOTE: Use quotes to specify media names which contain spaces."
      printf "\n\tFor example, to play the album 'Love Bomb':"
      printf "\n\t\troon -A \"Love Bomb\"\n"
    fi
  }
  exit 1
}

show_roon_menu=
[ "$1" ] || show_roon_menu=1

ROON=/usr/local/Roon
ROONAPI=${ROON}/api
ROONETC=${ROON}/etc
ROON_INI=${ROONETC}/roon_api.ini
ROONCONF=${ROONETC}/pyroonconf
LOCAL=false
BOLD=$(tput bold 2>/dev/null)
NORMAL=$(tput sgr0 2>/dev/null)

[ -f ${ROON}/venv/bin/activate ] && source ${ROON}/venv/bin/activate
[ -x ${ROON}/venv/bin/python ] && export PYTHON=${ROON}/venv/bin/python

[[ ":$PATH:" == *":/usr/local/bin:"* ]] || export PATH=${PATH}:/usr/local/bin
[[ ":$PATH:" == *":/usr/local/Roon/bin:"* ]] || {
  export PATH=/usr/local/Roon/bin:${PATH}
}
[[ ":$PATH:" == *":/usr/local/Roon/venv/bin:"* ]] || {
  export PATH=/usr/local/Roon/venv/bin:${PATH}
}
if [ -x /home/linuxbrew/.linuxbrew/bin/brew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
else
  [ -x /usr/local/bin/brew ] && eval "$(/usr/local/bin/brew shellenv)"
fi

set_default_conf() {
  if [ -w ${ROONETC} ]; then
    echo "LOCAL=true" >${ROONCONF}
    DEFZONE=$(grep ^DefaultZone ${ROON_INI} | awk -F '=' ' { print $2 } ')
    # Remove leading and trailing spaces in DEFZONE
    DEFZONE="$(echo -e "${DEFZONE}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    echo "ROON_ZONE=\"$DEFZONE\"" >>${ROONCONF}
  else
    echo "${ROONETC} is not writeable by this user."
    echo "Correct permissions on ${ROONETC} and re-run this command."
    echo "Exiting."
    exit 1
  fi
}

[ -f ${ROONCONF} ] || set_default_conf

bash -n ${ROONCONF} >/dev/null 2>&1
[ $? -eq 0 ] || {
  echo "WARNING: Syntax errors in ${ROONCONF} have been detected."
  echo "The following is the output of bash -n ${ROONCONF}"
  echo ""
  bash -n ${ROONCONF}
  echo ""
  while true; do
    read -r -p "Revert to default settings and continue? (y/n) " answer
    case ${answer} in
      [Yy]*)
        set_default_conf
        break
        ;;
      [Nn]*)
        echo "Correct syntax errors in ${ROONCONF} and re-run this command."
        echo "Exiting."
        exit 1
        ;;
      *)
        echo "Please answer 'y' to repair configuration, or 'n' to exit."
        ;;
    esac
  done
}
[ -f ${ROONCONF} ] && . ${ROONCONF}

select_zone() {
  ${IFS+"false"} && unset oldifs || oldifs="$IFS"
  IFS=$'\n'
  if [ "${LOCAL}" == "true" ]; then
    zones=$(${ROON}/bin/get_zones | sed -e 's/\, /\,/g')
  else
    zones=$(ssh $user@$server "bash -l -c \"${ROON}/bin/get_zones | sed -e 's/\, /\,/g'\"")
  fi
  zone_options=($(echo "${zones}" | awk -F "," ' { for(i=1;i<=NF;i++) printf "%s\n",$i }'))
  ${oldifs+"false"} && unset IFS || IFS="$oldifs"
  zone_options+=("Defaults Menu" "Main Menu" "Quit (q)")
  while true; do
    [ "${have_rich}" ] && {
      rich "[bold][cyan]Select Roon Zone[/cyan][/bold]" -p -a rounded -c -C
    }
    PS3="${BOLD}Please enter the Roon zone you wish to use (numeric or text): ${NORMAL}"
    select opt in "${zone_options[@]}"; do
      case "$opt,$REPLY" in
        "Main Menu",* | *,"Main Menu")
          main_menu
          break 2
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          printf "\nExiting\n"
          exit 0
          ;;
        "Defaults Menu",* | *,"Defaults Menu")
          list_defaults
          break 2
          ;;
        *,*)
          if [[ " ${zone_options[*]} " =~ " ${opt} " ]]; then
            echo "${BOLD}Executing Roon command to set default zone to: ${opt}${NORMAL}"
            if [ "${LOCAL}" = true ]; then
              ${ROON}/bin/set_zone "${opt}"
            else
              ssh $user@$server "bash -l -c \"${ROON}/bin/set_zone ${opt}\""
            fi
            status=$?
            [ ${status} -eq 0 ] || {
              echo "Unable to set zone for zone = $opt"
            }
            break 2
          else
            printf "\n\nInvalid option: ${opt}"
            printf "\n\tPlease enter either the exact text or numeric designation"
            printf "\n\tfor one of the listed options below.\n\n"
            break
          fi
          ;;
      esac
    done
  done
}

select_default() {
  media="$1"
  have_python3=$(type -p python3)
  if [ "${have_python3}" ]; then
    pycom="python3 ${ROONAPI}/set_default.py"
  else
    pycom="python ${ROONAPI}/set_default.py"
  fi
  case "${media}" in
    "Set Default Album")
      setdefcom="${pycom} -A"
      listcom="list_albums"
      medtype="Album"
      ;;
    "Set Default Artist")
      setdefcom="${pycom} -a"
      listcom="list_artists"
      medtype="Artist"
      ;;
    "Set Default Composer")
      setdefcom="${pycom} -c"
      listcom="list_composers"
      medtype="Composer"
      ;;
    "Set Default Genre")
      setdefcom="${pycom} -g"
      listcom="list_genres"
      medtype="Genre"
      ;;
    "Set Default Playlist")
      setdefcom="${pycom} -p"
      listcom="list_playlists"
      medtype="Playlist"
      ;;
    "Set Default Radio")
      setdefcom="${pycom} -r"
      listcom="list_radio"
      medtype="Radio"
      ;;
    "Set Default Tag")
      setdefcom="${pycom} -t"
      listcom="list_tags"
      medtype="Tag"
      ;;
    *)
      return 1
      ;;
  esac
  printf "\nRetrieving ${medtype}s in your Roon library ..."
  ${IFS+"false"} && unset oldifs || oldifs="$IFS"
  IFS=$'\n'
  if [ "${LOCAL}" = true ]; then
    media_options=($(${listcom} __all__))
  else
    media_options=($(ssh $user@$server "bash -l -c \"${ROON}/bin/${listcom} __all__\""))
  fi
  DEFAULT=$(grep ^Default${medtype} ${ROON_INI} | awk -F '=' ' { print $2 } ')
  # Remove leading and trailing spaces
  DEFAULT="$(echo -e "${DEFAULT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
  printf " Done\n\n"
  printf "Default${medtype} = ${DEFAULT}\n\n"

  ${oldifs+"false"} && unset IFS || IFS="$oldifs"
  media_options+=("Set Defaults Menu" "Main Menu" "Quit (q)")
  while true; do
    [ "${have_rich}" ] && {
      rich "[bold][cyan]RoonCommandLine Default ${medtype}[/cyan][/bold]" -p -a rounded -c -C
    }
    PS3="${BOLD}Please enter the ${medtype} you wish to set as default (numeric or text): ${NORMAL}"
    select opt in "${media_options[@]}"; do
      case "$opt,$REPLY" in
        "Set Defaults Menu",* | *,"Set Defaults Menu")
          break 2
          ;;
        "Main Menu",* | *,"Main Menu")
          main_menu
          break 3
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          printf "\nExiting\n"
          exit 0
          ;;
        *,*)
          echo "${BOLD}Setting Roon ${medtype} default to: ${opt}${NORMAL}"
          if [ "${LOCAL}" = true ]; then
            ${setdefcom} "${opt}"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/${setdefcom} ${opt}\""
          fi
          break 2
          ;;
      esac
    done
  done
}

select_media() {
  media="$1"
  case "${media}" in
    album)
      playcom="play_album"
      listcom="list_albums"
      medtype="Album"
      ;;
    artist)
      playcom="play_artist"
      listcom="list_artists"
      medtype="Artist"
      ;;
    composer)
      playcom="play_composer"
      listcom="list_composers"
      medtype="Composer"
      ;;
    genre)
      playcom="play_genre"
      listcom="list_genres"
      medtype="Genre"
      ;;
    playlist)
      playcom="play_playlist"
      listcom="list_playlists"
      medtype="Playlist"
      ;;
    station)
      playcom="play_radio"
      listcom="list_radio"
      medtype="Radio"
      ;;
    tag)
      playcom="play_tag"
      listcom="list_tags"
      medtype="Tag"
      ;;
    *)
      return 1
      ;;
  esac
  printf "\nRetrieving ${media}s in your Roon library ..."
  ${IFS+"false"} && unset oldifs || oldifs="$IFS"
  IFS=$'\n'
  if [ "${LOCAL}" = true ]; then
    media_options=($(${listcom} __all__))
  else
    media_options=($(ssh $user@$server "bash -l -c \"${ROON}/bin/${listcom} __all__\""))
  fi
  DEFAULT=$(grep ^Default${medtype} ${ROON_INI} | awk -F '=' ' { print $2 } ')
  # Remove leading and trailing spaces
  DEFAULT="$(echo -e "${DEFAULT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
  printf " Done\n\n"
  printf "Default ${media}: ${DEFAULT}\n\n"

  ${oldifs+"false"} && unset IFS || IFS="$oldifs"
  media_options+=("Main Menu" "Quit (q)")
  while true; do
    [ "${have_rich}" ] && {
      rich "[bold][cyan]RoonCommandLine Play ${medtype}[/cyan][/bold]" -p -a rounded -c -C
    }
    PS3="${BOLD}Please enter the ${media} you wish to play (numeric or text): ${NORMAL}"
    select opt in "${media_options[@]}"; do
      case "$opt,$REPLY" in
        "Main Menu",* | *,"Main Menu")
          main_menu
          break 2
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          printf "\nExiting\n"
          exit 0
          ;;
        *,*)
          echo "${BOLD}Executing Roon command to play ${media}: ${opt}${NORMAL}"
          if [ "${LOCAL}" = true ]; then
            ${playcom} "${opt}"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/${playcom} ${opt}\""
          fi
          break 2
          ;;
      esac
    done
  done
}

select_set_volume() {
  volume_options=("Mute/Unmute Zone" "Mute/Unmute All Zones" "Set Volume to 10" "Set Volume to 20" "Set Volume to 30" "Set Volume to 40" "Set Volume to 50" "Set Volume to 60" "Set Volume to 70" "Set Volume to 80" "Set Volume to 90" "Set Volume to 100" "Increase Volume by 1" "Increase Volume by 5" "Increase Volume by 10" "Increase Volume by 20" "Increase Volume by 40" "Decrease Volume by 1" "Decrease Volume by 5" "Decrease Volume by 10" "Decrease Volume by 20" "Decrease Volume by 40" "Main Menu" "Quit (q)")
  while true; do
    [ "${have_rich}" ] && {
      rich "[bold][cyan]RoonCommandLine Volume Control[/cyan][/bold]" -p -a rounded -c -C
    }
    printf "\n"
    PS3="${BOLD}Please enter the volume adjustment you wish to make (numeric or text): ${NORMAL}"
    select opt in "${volume_options[@]}"; do
      case "$opt,$REPLY" in
        "Set Volume to "*,* | *,"Set Volume to "*)
          volume=$(echo $opt | awk ' { print $NF } ')
          if [ "${LOCAL}" = true ]; then
            set_volume -v ${volume} -g
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/set_volume -v ${volume} -g\""
          fi
          break
          ;;
        "Increase Volume by "*,* | *,"Increase Volume by "*)
          volume=$(echo $opt | awk ' { print $NF } ')
          if [ "${LOCAL}" = true ]; then
            set_volume -v ${volume} -g -r
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/set_volume -v ${volume} -g -r\""
          fi
          break
          ;;
        "Decrease Volume by "*,* | *,"Decrease Volume by "*)
          volume=$(echo $opt | awk ' { print $NF } ')
          if [ "${LOCAL}" = true ]; then
            set_volume -v -${volume} -g -r
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/set_volume -v -${volume} -g -r\""
          fi
          break
          ;;
        "Mute/Unmute Zone",* | *,"Mute/Unmute Zone")
          printf "\nExecuting Roon command to toggle mute audio ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c mute
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c mute\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Mute/Unmute All Zones",* | *,"Mute/Unmute All Zones")
          printf "\nExecuting Roon command to toggle mute in all zones ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c mute_all
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c mute_all\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Main Menu",* | *,"Main Menu")
          main_menu
          break 2
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          printf "\nExiting\n"
          exit 0
          ;;
      esac
    done
  done
}

list_defaults() {
  defaults_options=("Set Default Album" "Set Default Artist" "Set Default Composer" "Set Default Genre" "Set Default Playlist" "Set Default Radio" "Set Default Tag" "Set Default Zone" "Main Menu" "Quit (q)")
  while true; do
    for media in Album Artist Composer Genre Playlist Radio Tag; do
      DEFAULT=$(grep ^Default${media} ${ROON_INI} | awk -F '=' ' { print $2 } ')
      # Remove leading and trailing spaces
      DEFAULT="$(echo -e "${DEFAULT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      printf "\nDefault ${media}: ${DEFAULT}"
    done
    printf "\n\n"
    [ "${have_rich}" ] && {
      rich "[bold][cyan]RoonCommandLine Defaults Menu[/cyan][/bold]" -p -a rounded -c -C
    }
    PS3="${BOLD}Please enter the default you wish to set (numeric or text): ${NORMAL}"
    select opt in "${defaults_options[@]}"; do
      case "$opt,$REPLY" in
        "Main Menu",* | *,"Main Menu")
          main_menu
          break 2
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          printf "\nExiting\n"
          exit 0
          ;;
        "Set Default Zone",* | *,"Set Default Zone")
          [ -f ${ROONCONF} ] && . ${ROONCONF}
          if [ "${LOCAL}" = true ]; then
            if [ "${ROON_ZONE}" ]; then
              echo ""
              echo "Current Roon Zone is ${ROON_ZONE}"
            else
              echo ""
              echo "No default Roon Zone is set in ${ROONCONF}"
            fi
          else
            roon_zone=$(ssh $user@$server "bash -l -c \"grep ROON_ZONE ${ROONCONF}\"")
            if [ "${roon_zone}" ]; then
              echo ""
              echo "Current Roon Zone is ${roon_zone}"
            else
              echo ""
              echo "No default Roon Zone is set in ${ROONCONF}"
            fi
          fi
          select_zone
          break
          ;;
        *,*)
          select_default "${opt}"
          break
          ;;
      esac
    done
  done
}

main_menu() {
  while true; do
    [ "${have_rich}" ] && {
      rich "[bold][cyan]RoonCommandLine Main Menu[/cyan][/bold]" -p -a rounded -c -C
    }
    PS3="${BOLD}Please enter your Roon command choice (numeric or text): ${NORMAL}"
    options=("Get/Set Defaults" "Get/Set Zone" "Play" "Play All" "Pause" "Pause All" "Next Track" "Previous Track" "Stop" "Stop All" "Toggle Mute" "Toggle Mute All" "Disable Repeat" "Enable Repeat" "Disable Shuffle" "Enable Shuffle" "List Albums" "List Artists" "List Composers" "List Genres" "List Playlists" "List Live Radio" "List Tags" "List Zones" "Select Album" "Select Artist" "Select Composer" "Select Genre" "Select Live Radio" "Select Playlist" "Select Tag" "Play Default Album" "Play Default Artist" "Play Default Composer" "Play Default Genre" "Play Default Radio" "Play Default Playlist" "Play Default Tag" "Fade Menu" "Volume")
    have_tui=$(type -p roon-tui)
    if [ "${have_tui}" ]; then
      options+=("Open roon-tui")
    else
      [ -x ${ROONETC}/install-roon-tui ] && options+=("Install roon-tui")
    fi
    options+=("Quit (q)")

    select opt in "${options[@]}"; do
      case "$opt,$REPLY" in
        "Get/Set Defaults",* | *,"Get/Set Defaults")
          list_defaults
          break
          ;;
        "Get/Set Zone",* | *,"Get/Set Zone")
          [ -f ${ROONCONF} ] && . ${ROONCONF}
          if [ "${LOCAL}" = true ]; then
            if [ "${ROON_ZONE}" ]; then
              echo ""
              echo "Current Roon Zone is ${ROON_ZONE}"
            else
              echo ""
              echo "No default Roon Zone is set in ${ROONCONF}"
            fi
          else
            roon_zone=$(ssh $user@$server "bash -l -c \"grep ROON_ZONE ${ROONCONF}\"")
            if [ "${roon_zone}" ]; then
              echo ""
              echo "Current Roon Zone is ${roon_zone}"
            else
              echo ""
              echo "No default Roon Zone is set in ${ROONCONF}"
            fi
          fi
          select_zone
          break
          ;;
        "Play",* | *,"Play")
          printf "\nExecuting Roon command to play ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c play
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c play\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Play All",* | *,"Play All")
          printf "\nExecuting Roon command to play in all zones ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c play_all
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c play_all\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Pause All",* | *,"Pause All")
          printf "\nExecuting Roon command to pause play in all zones ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c pause_all
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c pause_all\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Pause",* | *,"Pause")
          printf "\nExecuting Roon command to pause play ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c pause
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c pause\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Next Track",* | *,"Next Track")
          printf "\nExecuting Roon command to play next track ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c next
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c next\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Previous Track",* | *,"Previous Track")
          printf "\nExecuting Roon command to play previous track ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c previous
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c previous\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Stop",* | *,"Stop")
          printf "\nExecuting Roon command to stop ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c stop
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c stop\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Stop All",* | *,"Stop All")
          printf "\nExecuting Roon command to stop in all zones ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c stop_all
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c stop_all\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Fade Menu",* | *,"Fade Menu")
          exec roon_fade -i
          break
          ;;
        "Toggle Mute",* | *,"Toggle Mute")
          printf "\nExecuting Roon command to toggle mute audio ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c mute
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c mute\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Toggle Mute All",* | *,"Toggle Mute All")
          printf "\nExecuting Roon command to toggle mute in all zones ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c mute_all
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c mute_all\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Disable Repeat",* | *,"Disable Repeat")
          printf "\nExecuting Roon command to disable repeat ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c unrepeat
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c unrepeat\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Enable Repeat",* | *,"Enable Repeat")
          printf "\nExecuting Roon command to enable repeat ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c repeat
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c repeat\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Disable Shuffle",* | *,"Disable Shuffle")
          printf "\nExecuting Roon command to disable shuffle ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c unshuffle
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c unshuffle\""
          fi
          printf " Done\n\n"
          break
          ;;
        "Enable Shuffle",* | *,"Enable Shuffle")
          printf "\nExecuting Roon command to enable shuffle ..."
          if [ "${LOCAL}" = true ]; then
            zone_command -c shuffle
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c shuffle\""
          fi
          printf " Done\n\n"
          break
          ;;
        "List Albums",* | *,"List Albums")
          if [ "${LOCAL}" = true ]; then
            list_albums __all__ "${exalbum}"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_albums __all__ ${exalbum}\""
          fi
          break
          ;;
        "List Artists",* | *,"List Artists")
          if [ "${LOCAL}" = true ]; then
            list_artists __all__ "${exartist}"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_artists __all__ ${exartist}\""
          fi
          break
          ;;
        "List Composers",* | *,"List Composers")
          if [ "${LOCAL}" = true ]; then
            list_composers __all__ "$exartist"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_composers __all__ $exartist\""
          fi
          break
          ;;
        "List Genres",* | *,"List Genres")
          if [ "${LOCAL}" = true ]; then
            list_genres __all__ "$exalbum"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_genres __all__ $exalbum\""
          fi
          break
          ;;
        "List Playlists",* | *,"List Playlists")
          if [ "${LOCAL}" = true ]; then
            list_playlists __all__ "$exartist"
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_playlists __all__ $exartist\""
          fi
          break
          ;;
        "List Live Radio",* | *,"List Live Radio")
          if [ "${LOCAL}" = true ]; then
            list_radio __all__
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_radio __all__\""
          fi
          break
          ;;
        "List Tags",* | *,"List Tags")
          if [ "${LOCAL}" = true ]; then
            list_tags __all__
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_tags __all__\""
          fi
          break
          ;;
        "List Zones",* | *,"List Zones")
          if [ "${LOCAL}" = true ]; then
            list_zones
          else
            ssh $user@$server "bash -l -c \"${ROON}/bin/list_zones\""
          fi
          break
          ;;
        "Select Album",* | *,"Select Album")
          select_media album
          break
          ;;
        "Select Artist",* | *,"Select Artist")
          select_media artist
          break
          ;;
        "Select Composer",* | *,"Select Composer")
          select_media composer
          break
          ;;
        "Select Genre",* | *,"Select Genre")
          select_media genre
          break
          ;;
        "Select Playlist",* | *,"Select Playlist")
          select_media playlist
          break
          ;;
        "Select Live Radio",* | *,"Select Live Radio")
          select_media station
          break
          ;;
        "Select Tag",* | *,"Select Tag")
          select_media tag
          break
          ;;
        "Play Default Album",* | *,"Play Default Album")
          if [ "${LOCAL}" = true ]; then
            play_album
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_album"
          fi
          break
          ;;
        "Play Default Artist",* | *,"Play Default Artist")
          if [ "${LOCAL}" = true ]; then
            play_artist
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_artist"
          fi
          break
          ;;
        "Play Default Composer",* | *,"Play Default Composer")
          if [ "${LOCAL}" = true ]; then
            play_composer
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_composer"
          fi
          break
          ;;
        "Play Default Genre",* | *,"Play Default Genre")
          if [ "${LOCAL}" = true ]; then
            play_genre
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_genre"
          fi
          break
          ;;
        "Play Default Playlist",* | *,"Play Default Playlist")
          if [ "${LOCAL}" = true ]; then
            play_playlist
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_playlist"
          fi
          break
          ;;
        "Play Default Radio",* | *,"Play Default Radio")
          if [ "${LOCAL}" = true ]; then
            play_radio
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_radio"
          fi
          break
          ;;
        "Play Default Tag",* | *,"Play Default Tag")
          if [ "${LOCAL}" = true ]; then
            play_tag
          else
            ssh $user@$server "bash -l -c ${ROON}/bin/play_tag"
          fi
          break
          ;;
        "Volume",* | *,"Volume")
          select_set_volume
          break
          ;;
        "Open roon-tui",* | *,"Open roon-tui")
          roon-tui
          break
          ;;
        "Install roon-tui",* | *,"Install roon-tui")
          ${ROONETC}/install-roon-tui
          break
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          printf "\nExiting\n"
          exit 0
          ;;
      esac
    done
  done
}

info=
fading=
logfade=
now_playing=
inst_roon_tui=
open_roon_tui=
while getopts A:a:c:C:D:f:F:g:G:hHiInNOp:T:t:z:l:s:LSr:v:x:X:EuU flag; do
  case $flag in
    A)
      album="$OPTARG"
      ;;
    a)
      artist="$OPTARG"
      ;;
    c)
      comm="$OPTARG"
      ;;
    C)
      composer="$OPTARG"
      ;;
    D)
      dest_zone="$OPTARG"
      ;;
    F)
      from_zone="$OPTARG"
      ;;
    f)
      fading="$OPTARG"
      case ${fading} in
        On | ON | on)
          fading="on"
          ;;
        Onlog | ONLOG | OnLog | onlog)
          fading="on"
          logfade="-l"
          ;;
        Off | OFF | off)
          fading="off"
          ;;
        Stat* | stat*)
          fading="status"
          ;;
        *)
          echo "Unsupported -f argument: ${fading}"
          echo "No fading will be enabled or disabled"
          fading=
          ;;
      esac
      ;;
    g)
      genre="$OPTARG"
      ;;
    i)
      info=1
      ;;
    I)
      inst_roon_tui=1
      ;;
    N)
      now_playing=1
      nowarg="-a"
      ;;
    n)
      now_playing=1
      nowarg=
      ;;
    O)
      [ -x ${HOME}/.local/bin/roon-tui ] && open_roon_tui=1
      ;;
    p)
      playlist="$OPTARG"
      ;;
    T)
      track="$OPTARG"
      ;;
    t)
      tag="$OPTARG"
      ;;
    z)
      zone="$OPTARG"
      ;;
    l)
      listname="$OPTARG"
      if [ "$listname" == "albums" ] || [ "$listname" == "album" ]; then
        albumlist=1
      elif [ "$listname" == "artists" ] || [ "$listname" == "artist" ]; then
        artistlist=1
      elif [ "$listname" == "artalbums" ] || [ "$listname" == "artalbum" ]; then
        artalbumlist=1
      elif [ "$listname" == "arttracks" ] || [ "$listname" == "arttrack" ]; then
        arttracklist=1
      elif [ "$listname" == "playtracks" ] || [ "$listname" == "playtrack" ]; then
        playtracklist=1
      elif [ "$listname" == "composers" ] || [ "$listname" == "composer" ]; then
        composerlist=1
      elif [ "$listname" == "comalbums" ] || [ "$listname" == "comalbum" ]; then
        comalbumlist=1
      elif [ "$listname" == "genres" ] || [ "$listname" == "genre" ]; then
        genrelist=1
      elif [ "$listname" == "genalbums" ] || [ "$listname" == "genalbum" ]; then
        genalbumlist=1
      elif [ "$listname" == "genartists" ] || [ "$listname" == "genartist" ]; then
        genartistlist=1
      elif [ "$listname" == "playlists" ] || [ "$listname" == "playlist" ]; then
        playlistlist=1
      elif [ "$listname" == "stations" ] || [ "$listname" == "radio" ]; then
        radiolist=1
      elif [ "$listname" == "tags" ] || [ "$listname" == "tag" ]; then
        taglist=1
      elif [ "$listname" == "zones" ] || [ "$listname" == "zone" ]; then
        zonelist=1
      else
        echo "Unknown list type: $listname"
        usage
      fi

      ;;
    G)
      zonegroup="$OPTARG"
      ;;
    L)
      if [ -f ${ROONCONF} ]; then
        grep -v ^LOCAL= ${ROONCONF} >/tmp/roon$$
        echo "LOCAL=true" >>/tmp/roon$$
        cp /tmp/roon$$ ${ROONCONF}
        rm -f /tmp/roon$$
        . ${ROONCONF}
      else
        echo "${ROONCONF} does not exist"
        echo "RoonCommandLine is not installed locally"
      fi
      ;;
    r)
      radio="$OPTARG"
      ;;
    s)
      search="$OPTARG"
      ;;
    S)
      setdefs=1
      ;;
    v)
      # The volume argument has the format [g:][r:][s:]num
      # Where 'g' indicates set volume for all zones in the group
      # 'r' specifies use relative method volume setting
      # 's' specifies use relative_step method volume setting
      # 'num' can be absolute, relative, and negative or positive
      volume=$OPTARG
      grouped=
      relative=
      step=
      need_num=1
      while [ "${need_num}" ]; do
        first_two=${volume:0:2}
        case "${first_two}" in
          g:)
            grouped="-g"
            volume=${volume:2}
            ;;
          r:)
            relative="-r"
            volume=${volume:2}
            ;;
          s:)
            step="-s"
            volume=${volume:2}
            ;;
          *)
            need_num=
            ;;
        esac
      done
      ;;
    X)
      exalbum="$OPTARG"
      ;;
    x)
      exartist="$OPTARG"
      ;;
    E)
      showusage=
      showexamples=1
      usage
      ;;
    h)
      have_rich=
      showusage=1
      showexamples=
      usage
      ;;
    H)
      have_rich=
      showusage=1
      showexamples=1
      usage
      ;;
    U)
      showusage=1
      showexamples=
      usage
      ;;
    *)
      usage
      ;;
  esac
done

[ "${inst_roon_tui}" ] && {
  [ -x ${ROON}/etc/install-roon-tui ] && ${ROON}/etc/install-roon-tui
  if [ -x ${HOME}/.local/bin/roon-tui ]; then
    ${HOME}/.local/bin/roon-tui
    echo ""
    echo "Successful installation of roon-tui"
    exit 0
  else
    echo "Installation of roon-tui failed or did not create $HOME/.local/bin/roon-tui"
    echo "Exiting"
    exit 1
  fi
}

[ "$search" ] || search="__all__"

# Set Defaults
[ "$setdefs" ] && {
  list_defaults
}

# Set Zone
[ "$zone" ] && {
  if [ "${LOCAL}" = true ]; then
    ${ROON}/bin/set_zone $zone
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/set_zone $zone\""
  fi
  status=$?
  [ ${status} -eq 0 ] || {
    echo "Unable to set zone for zone = $zone"
    echo "Exiting"
    exit ${status}
  }
}

# Zone Grouping
[ "$zonegroup" ] && {
  [ "$comm" == "group" ] || [ "$comm" == "ungroup" ] || comm=group
  if [ "${LOCAL}" = true ]; then
    ${ROON}/bin/set_zone_group $comm $zonegroup
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/set_zone_group $comm $zonegroup\""
  fi
  status=$?
  [ ${status} -eq 0 ] || {
    echo "Unable to set zone group for zone group = $zonegroup"
    echo "Exiting"
    exit ${status}
  }
}

[ "$info" ] && {
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      ${ROON}/bin/get_zone_info -z "$zone"
    else
      ${ROON}/bin/get_zone_info
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/get_zone_info -z $zone\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/get_zone_info\""
    fi
  fi
}

# Transfer Zone
[ "$dest_zone" ] && {
  [ "$from_zone" ] || from_zone="${ROON_ZONE}"
  if [ "${LOCAL}" = true ]; then
    ${ROON}/bin/transfer_zone "$from_zone" "$dest_zone"
  else
    ssh $user@$server bash -l -c "${ROON}/bin/transfer_zone \"$from_zone\" \"$dest_zone\""
  fi
  status=$?
  [ ${status} -eq 0 ] || {
    echo "Unable to transfer zone to zone = $dest_zone"
  }
}

[ "${fading}" ] && {
  [ "${fading}" == "status" ] && fading=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      ${ROON}/bin/roon_fade ${logfade} -z "$zone" ${fading}
    else
      ${ROON}/bin/roon_fade ${logfade} ${fading}
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server \
        "bash -l -c \"${ROON}/bin/roon_fade ${logfade} -z $zone ${fading}\""
    else
      ssh $user@$server \
        "bash -l -c \"${ROON}/bin/roon_fade ${logfade} ${fading}\""
    fi
  fi
}

[ "$now_playing" ] && {
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      ${ROON}/bin/now_playing ${nowarg} -z "$zone"
    else
      ${ROON}/bin/now_playing ${nowarg}
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/now_playing ${nowarg} -z $zone\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/now_playing ${nowarg}\""
    fi
  fi
}

[ "$albumlist" ] && {
  [ "$album" ] || {
    [ "$search" ] && album="$search"
  }
  [ "$album" ] || album="__all__"
  if [ "${LOCAL}" = true ]; then
    list_albums "$album" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_albums $album $exalbum\""
  fi
  album=
}
[ "$artistlist" ] && {
  [ "$artist" ] || {
    [ "$search" ] && artist="$search"
  }
  [ "$artist" ] || artist="__all__"
  if [ "${LOCAL}" = true ]; then
    list_artists "$artist" "$exartist"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_artists $artist $exartist\""
  fi
  artist=
}
[ "$artalbumlist" ] && {
  [ "$artist" ] || {
    [ "$search" ] && artist=$search
  }
  [ "$album" ] || album="__all__"
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    list_artist_albums "$artist" "$album" "$exartist" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_artist_albums $artist $album $exartist $exalbum\""
  fi
  album=
  artist=
}
[ "$arttracklist" ] && {
  [ "$artist" ] || {
    [ "$search" ] && artist=$search
  }
  [ "$track" ] || track="__all__"
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    list_artist_tracks "$artist" "$track" "$exartist" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_artist_tracks $artist $track $exartist $exalbum\""
  fi
  track=
  artist=
}
[ "$playtracklist" ] && {
  [ "$playlist" ] || {
    [ "$search" ] && playlist=$search
  }
  [ "$track" ] || track="__all__"
  [ "${extrack}" ] && {
    [ "${explaylist}" ] || explaylist="None"
  }
  if [ "${LOCAL}" = true ]; then
    list_playlist_tracks "$playlist" "$track" "$explaylist" "$extrack"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_playlist_tracks $playlist $track $explaylist $extrack\""
  fi
  track=
  playlist=
}
[ "$comalbumlist" ] && {
  [ "$composer" ] || {
    [ "$search" ] && composer=$search
  }
  [ "$album" ] || album="__all__"
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    list_composer_albums "$composer" "$album" "$exartist" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_composer_albums $composer $album $exartist $exalbum\""
  fi
  album=
  composer=
}
[ "$composerlist" ] && {
  [ "$composer" ] || {
    [ "$search" ] && composer="$search"
  }
  [ "$composer" ] || composer="__all__"
  if [ "${LOCAL}" = true ]; then
    list_composers "$composer" "$exartist"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_composers $composer $exartist\""
  fi
  composer=
}
[ "$genrelist" ] && {
  [ "$genre" ] || {
    [ "$search" ] && genre="$search"
  }
  [ "$genre" ] || genre="__all__"
  if [ "${LOCAL}" = true ]; then
    list_genres "$genre" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_genres $genre $exalbum\""
  fi
  genre=
}
[ "$genalbumlist" ] && {
  [ "$album" ] || album="__all__"
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    list_genre_albums "$genre" "$album" "$exartist" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_genre_albums $genre $album $exartist $exalbum\""
  fi
  album=
  genre=
}
[ "$genartistlist" ] && {
  [ "$genre" ] || {
    [ "$search" ] && genre=$search
  }
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    list_genre_artists "$genre" "$artist" "$exartist" "$exalbum"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_genre_artists $genre $artist $exartist $exalbum\""
  fi
  artist=
  genre=
}
[ "$playlistlist" ] && {
  [ "$playlist" ] || {
    [ "$search" ] && playlist="$search"
  }
  if [ "${LOCAL}" = true ]; then
    list_playlists $playlist "$exartist"
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_playlists $playlist $exartist\""
  fi
  playlist=
}
[ "$radiolist" ] && {
  if [ "${LOCAL}" = true ]; then
    list_radio $search
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_radio $search\""
  fi
}
[ "$taglist" ] && {
  if [ "${LOCAL}" = true ]; then
    list_tags $search
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_tags $search\""
  fi
}
[ "$zonelist" ] && {
  if [ "${LOCAL}" = true ]; then
    list_zones $search
  else
    ssh $user@$server "bash -l -c \"${ROON}/bin/list_zones $search\""
  fi
}

# Issue commands before playback begins
[ "${comm}" ] && {
  case "${comm}" in
    "shuffle" | "unshuffle" | "repeat" | "unrepeat" | "mute" | "unmute" | "mute_all" | "next" | "previous" | "play" | "play_all" | "pause" | "pause_all" | "stop" | "stop_all" | "playpause")
      if [ "${LOCAL}" = true ]; then
        if [ "$zone" ]; then
          zone_command -c ${comm} -z "${zone}"
        else
          zone_command -c ${comm}
        fi
      else
        if [ "$zone" ]; then
          ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c ${comm} -z ${zone}\""
        else
          ssh $user@$server "bash -l -c \"${ROON}/bin/zone_command -c ${comm}\""
        fi
      fi
      ;;
    "group" | "ungroup") ;;
    *)
      echo "Unrecognized Roon command: $comm"
      usage
      ;;
  esac
}

# Shuffle action only supported in Artist, Genre, and Playlist playback for now
shuffled=
[ "${comm}" == "shuffle" ] && shuffled="-s"

# First, handle album and artist requested
[ "$album" ] && [ "$artist" ] && {
  [ "${album}" == "default" ] && album=
  [ "${artist}" == "default" ] && artist=
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_artist_album -z "$zone" "$artist" "$album" "$exartist" "$exalbum"
    else
      play_artist_album "$artist" "$album" "$exartist" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_artist_album -z $zone $artist $album $exartist $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_artist_album $artist $album $exartist $exalbum\""
    fi
  fi
  album=
  artist=
}
# Second, handle artist and track requested
[ "$track" ] && [ "$artist" ] && {
  [ "${artist}" == "default" ] && artist=
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_artist_track -z "$zone" "$artist" "$track" "$exartist" "$exalbum"
    else
      play_artist_track "$artist" "$track" "$exartist" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_artist_track -z $zone $artist $track $exartist $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_artist_track $artist $track $exartist $exalbum\""
    fi
  fi
  artist=
}
# Third, handle album or artist and genre requested
[ "$album" ] && [ "$genre" ] && {
  [ "${album}" == "default" ] && album=
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_genre_album -z "$zone" "$genre" "$album" "$exartist" "$exalbum"
    else
      play_genre_album "$genre" "$album" "$exartist" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_genre_album -z $zone $genre $album $exartist $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_genre_album $genre $album $exartist $exalbum\""
    fi
  fi
  album=
  genre=
}
# Fourth, handle album and composer requested
[ "$album" ] && [ "$composer" ] && {
  [ "${album}" == "default" ] && album=
  [ "${composer}" == "default" ] && composer=
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_composer_album -z "$zone" "$composer" "$album" "$exartist" "$exalbum"
    else
      play_composer_album "$composer" "$album" "$exartist" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_composer_album -z $zone $composer $album $exartist $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_composer_album $composer $album $exartist $exalbum\""
    fi
  fi
  album=
  composer=
}
[ "$artist" ] && [ "$genre" ] && {
  [ "${artist}" == "default" ] && artist=
  [ "${exalbum}" ] && {
    [ "${exartist}" ] || exartist="None"
  }
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_genre_artist -z "$zone" "$genre" "$artist" "$exartist" "$exalbum"
    else
      play_genre_artist "$genre" "$artist" "$exartist" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_genre_artist -z $zone $genre $artist $exartist $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_genre_artist $genre $artist $exartist $exalbum\""
    fi
  fi
  artist=
  genre=
}
[ "$artist" ] && {
  [ "${artist}" == "default" ] && artist=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_artist $shuffled -z "$zone" "$artist" "$exartist"
    else
      play_artist $shuffled "$artist" "$exartist"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_artist $shuffled -z $zone $artist $exartist\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_artist $shuffled $artist $exartist\""
    fi
  fi
}
[ "$composer" ] && {
  [ "${composer}" == "default" ] && composer=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_composer -z "$zone" "$composer" "$exartist"
    else
      play_composer "$composer" "$exartist"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_composer -z $zone $composer $exartist\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_composer $composer $exartist\""
    fi
  fi
}
[ "$genre" ] && {
  [ "${genre}" == "default" ] && genre=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_genre $shuffled -z "$zone" "$genre" "$exalbum"
    else
      play_genre $shuffled "$genre" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_genre $shuffled -z $zone $genre $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_genre $shuffled $genre $exalbum\""
    fi
  fi
}
[ "$tag" ] && {
  [ "${tag}" == "default" ] && tag=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_tag -z "$zone" "$tag"
    else
      play_tag "$tag"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_tag -z $zone $tag\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_tag $tag\""
    fi
  fi
}
[ "$radio" ] && {
  [ "${radio}" == "default" ] && radio=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_radio -z "$zone" "${radio}"
    else
      play_radio "${radio}"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_radio -z ${zone} ${radio}\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_radio ${radio}\""
    fi
  fi
}

[ "${volume}" ] && {
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      set_volume -v ${volume} -z "${zone}" ${grouped} ${relative} ${step}
    else
      set_volume -v ${volume} ${grouped} ${relative} ${step}
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/set_volume -v ${volume} -z ${zone} ${grouped} ${relative} ${step}\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/set_volume -v ${volume} ${grouped} ${relative} ${step}\""
    fi
  fi
}

[ "$album" ] && {
  [ "${album}" == "default" ] && album=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_album -z "$zone" "$album" "$exalbum"
    else
      play_album "$album" "$exalbum"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_album -z $zone $album $exalbum\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_album $album $exalbum\""
    fi
  fi
}

[ "$playlist" ] && {
  [ "${playlist}" == "default" ] && playlist=
  if [ "${LOCAL}" = true ]; then
    if [ "$zone" ]; then
      play_playlist $shuffled -z "$zone" "$playlist" "$exartist"
    else
      play_playlist $shuffled "$playlist" "$exartist"
    fi
  else
    if [ "$zone" ]; then
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_playlist $shuffled -z $zone $playlist $exartist\""
    else
      ssh $user@$server "bash -l -c \"${ROON}/bin/play_playlist $shuffled $playlist $exartist\""
    fi
  fi
}
 
if [ "${open_roon_tui}" ]; then
  [ -x ${HOME}/.local/bin/roon-tui ] && ${HOME}/.local/bin/roon-tui
else
  [ "${show_roon_menu}" ] && main_menu
fi

exit 0
