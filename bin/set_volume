#!/bin/bash

ROON=/usr/local/Roon
ROONAPI=${ROON}/api
ROONETC=${ROON}/etc
ROONCONF=${ROONETC}/pyroonconf
SCRIPT=set_volume.py
VOLUME=50
GROUPED=
RELATIVE=
STEP=

[ -d ${ROONAPI} ] || exit 1

cd ${ROONAPI}

[ -f $SCRIPT ] || exit 2

# Get the zone if it is set
if [ -f ${ROONCONF} ]
then
    . ${ROONCONF}
else
    DEFZONE=`grep ^DefaultZone ${ROONETC}/roon_api.ini | awk -F '=' ' { print $2 } '`
    ${ROON}/bin/set_zone $DEFZONE
    . ${ROONCONF}
fi

# Parse the arguments to get the command and zone
while getopts "grsv:z:" flag; do
    case $flag in
        g)
            GROUPED="-g"
            ;;
        r)
            RELATIVE="-r"
            ;;
        s)
            STEP="-s"
            ;;
        v)
            VOLUME="$OPTARG"
            ;;
        z)
            ROON_ZONE="$OPTARG"
            ;;
    esac
done

# This check is now performed in set_volume.py
#[ "${RELATIVE}" ] || [ "${STEP}" ] || {
#    # If using absolute volume level, force between 0 and 100
#    [[ $(bc <<< "${VOLUME} > 100.0") == 1 ]] && VOLUME=100
#    [[ $(bc <<< "${VOLUME} < 0.0") == 1 ]] && VOLUME=0
#}

have_python3=`type -p python3`
if [ "${have_python3}" ]
then
    python3 $SCRIPT ${GROUPED} ${RELATIVE} ${STEP} -v "$VOLUME" -z "$ROON_ZONE"
else
    python $SCRIPT ${GROUPED} ${RELATIVE} ${STEP} -v "$VOLUME" -z "$ROON_ZONE"
fi

